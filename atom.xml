<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>C+V</title>
  <icon>https://www.gravatar.com/avatar/17e86b7f9d136f461ea7a8c3123a1b51</icon>
  <subtitle>万物可爱，你也不例外</subtitle>
  <link href="https://187370.github.io/atom.xml" rel="self"/>
  
  <link href="https://187370.github.io/"/>
  <updated>2024-09-24T15:15:34.023Z</updated>
  <id>https://187370.github.io/</id>
  
  <author>
    <name>C+V</name>
    <email>2715768122@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>123</title>
    <link href="https://187370.github.io/2024/09/24/123/"/>
    <id>https://187370.github.io/2024/09/24/123/</id>
    <published>2024-09-24T15:15:06.000Z</published>
    <updated>2024-09-24T15:15:34.023Z</updated>
    
    <content type="html"><![CDATA[<p>&#x3D;&#x3D;数据结构与算法&#x3D;&#x3D;</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">a<span class="built_in">_</span>&#123;1&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;#x3D;&amp;#x3D;数据结构与算法&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;figure class=&quot;highlight latex&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a&lt;span class=&quot;bui</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://187370.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://187370.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数算" scheme="https://187370.github.io/tags/%E6%95%B0%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://187370.github.io/2024/09/24/test/"/>
    <id>https://187370.github.io/2024/09/24/test/</id>
    <published>2024-09-24T11:50:00.000Z</published>
    <updated>2024-09-24T12:00:01.382Z</updated>
    
    <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/owen0o0/getFavicon">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">获取网站的Favicon图标并显示在你的网页上</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></li><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<span class='p center logo large'>Volantis</span><span class='p center small'>A Wonderful Theme for Hexo</span><ol><li>带 <u>下划线</u> 的文本</li></ol></li></ul><ol start="2"><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button><button type="button" class="tab " data-href="test1-3">test1 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="btns circle grid5">            <a class="button no-text-decoration" href='https://xaoxuu.com' title='xaoxuu'><img src='https://bu.dusays.com/2023/06/01/64787e6a5816d.png'>xaoxuu</a><a class="button no-text-decoration" href='https://xaoxuu.com' title='xaoxuu'><img src='https://bu.dusays.com/2023/06/01/64787e6a5816d.png'>xaoxuu</a><a class="button no-text-decoration" href='https://xaoxuu.com' title='xaoxuu'><img src='https://bu.dusays.com/2023/06/01/64787e6a5816d.png'>xaoxuu</a><a class="button no-text-decoration" href='https://xaoxuu.com' title='xaoxuu'><img src='https://bu.dusays.com/2023/06/01/64787e6a5816d.png'>xaoxuu</a><a class="button no-text-decoration" href='https://xaoxuu.com' title='xaoxuu'><img src='https://bu.dusays.com/2023/06/01/64787e6a5816d.png'>xaoxuu</a>          </div><div class="btns rounded grid5">            <a class="button no-text-decoration" href='/' title='下载源码'><i class='anzhiyufont anzhiyu-icon-bolt'></i>下载源码</a><a class="button no-text-decoration" href='/' title='查看文档'><i class='anzhiyufont anzhiyu-icon-book'></i>查看文档</a>          </div><span></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;div calss=&#39;anzhiyu-tag-link&#39;&gt;&lt;a class=&quot;tag-Link&quot; target=&quot;_blank&quot; href=&quot;https://github.com/owen0o0/getFavicon&quot;&gt;
    &lt;div class=&quot;tag-link-tip</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ics第三周:程序的机器级表示</title>
    <link href="https://187370.github.io/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/"/>
    <id>https://187370.github.io/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</id>
    <published>2024-09-23T04:54:51.000Z</published>
    <updated>2024-09-23T14:00:07.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条件码"><a href="#条件码" class="headerlink" title="条件码"></a>条件码</h1><p><strong>条件码寄存器</strong>（Condition Code Register），在 x86-64 架构中，也被称为 <strong>EFLAGS 寄存器</strong>，用于存储 CPU 执行算术或逻辑运算后的状态信息。这些状态信息由一组 <strong>条件码</strong>（condition flags）表示，通常用于判断运算结果并进行条件分支跳转。</p><h3 id="条件码寄存器的主要用途："><a href="#条件码寄存器的主要用途：" class="headerlink" title="条件码寄存器的主要用途："></a>条件码寄存器的主要用途：</h3><ul><li><strong>保存运算结果的状态</strong>：每当 CPU 执行加法、减法、乘法、除法、比较等运算时，条件码寄存器会根据运算结果自动更新某些标志位。</li><li><strong>用于条件跳转</strong>：汇编中的条件跳转指令（如 <code>jz</code>、<code>jnz</code>、<code>jl</code> 等）通过检查条件码寄存器中的标志位来决定程序执行的下一步操作。</li></ul><h3 id="主要的条件码标志位："><a href="#主要的条件码标志位：" class="headerlink" title="主要的条件码标志位："></a>主要的条件码标志位：</h3><p>条件码寄存器中有几个位用于表示算术或逻辑操作后的状态，以下是最常见的几个标志位：</p><blockquote><p>条件码是隐式设置的，即不需要一条指令设置条件码，其在算术运算后自动设置（带来的电路的增多）</p></blockquote><ol><li><strong>CF（Carry Flag，进位标志）</strong>：<ul><li>在无符号运算中，进位标志用于表示加法时最高位发生了进位或减法时借位。</li><li><strong>置位条件</strong>：如果执行加法时有进位，或减法时发生了借位，则 CF 被设置为 1。</li><li><strong>使用场景</strong>：无符号运算中的溢出检测。</li><li><strong>C语言表示</strong>：<code>(unsigned)   t&lt;(unsigned)  a</code></li></ul></li><li><strong>ZF（Zero Flag，零标志）</strong>：<ul><li>用于表示操作结果是否为零。</li><li><strong>置位条件</strong>：如果运算结果为零，则 ZF 被设置为 1。</li><li><strong>使用场景</strong>：在判断某个值是否为零时非常有用。例如，条件跳转指令 <code>jz</code>（跳转如果零）和 <code>jnz</code>（跳转如果非零）使用此标志。</li><li><strong>C语言表示</strong>:<code>t==0</code></li></ul></li><li><strong>SF（Sign Flag，符号标志）</strong>：<ul><li>用于表示操作结果的符号位，专门用于有符号数的运算。</li><li><strong>置位条件</strong>：如果运算结果为负，SF 被设置为 1；如果为正，则 SF 为 0。</li><li><strong>使用场景</strong>：判断结果是否为负数，在有符号运算时常用。</li><li><strong>C语言表示</strong>:<code>t&lt;0</code></li></ul></li><li><strong>OF（Overflow Flag，溢出标志）</strong>：<ul><li>用于表示有符号运算中是否发生了溢出。</li><li><strong>置位条件</strong>：如果加法或减法导致了有符号数的溢出（即结果超过了能表示的范围），则 OF 被设置为 1。</li><li><strong>使用场景</strong>：用于检测有符号运算中的溢出情况。</li><li><strong>C语言表示</strong>:<code>(a&lt;0==b&lt;0)&amp;&amp;(t&lt;0!=a&lt;0)</code></li></ul></li></ol><h2 id="CMP和TEST指令"><a href="#CMP和TEST指令" class="headerlink" title="CMP和TEST指令"></a>CMP和TEST指令</h2><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923151419824.png" class="" title="image-20240923151419824"><ul><li>CMP指令除了不存结果到目的寄存器外，其他与SUB指令一样</li><li>TEST同样除了不存结果到目的寄存器外，其他与AND指令一样</li></ul><p>举个例子:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testq %rax,%rax   //检测%rax是否为0，当%rax为0时，ZF为1</span><br></pre></td></tr></table></figure><h2 id="访问条件码"><a href="#访问条件码" class="headerlink" title="访问条件码"></a>访问条件码</h2><p>我们使用SET指令类来访问条件码</p><p><strong>注意</strong></p><ul><li>SET指令的目的操作数是低位单字节寄存器或是一个字节的内存位置。将该字节设置为0或1</li><li>其他字节不变！</li></ul><p>所以如果要读入整个寄存器或者半个寄存器，要注意对高位清零。</p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923151818343.png" class="" title="image-20240923151818343"><p>注意有符号和无符号的指令的区别</p><ul><li>setge的解释</li></ul><table><thead><tr><th>SF</th><th>OF</th><th>SF^OF</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1(负溢出)</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0（正溢出）</td></tr></tbody></table><h2 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h2><p>我们知道正常情况下，指令按照它们出现的顺序一条一条地执行。</p><p>跳转指令会导致执行切换到程序中一个全新的位置。</p><p>跳转指令标：</p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923155449049.png" class="" title="image-20240923155449049"><p>这里要注意的<strong>间接跳转</strong>，写法就是*后面跟一个操作数指示符</p><p>举个例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmp *%rax   //用寄存器%rax的值作为跳转目标</span><br><span class="line">jmp  *(%rax)   //用%rax中的值作为读地址，从内存中读出跳转目标</span><br></pre></td></tr></table></figure><h3 id="跳转指令的编码"><a href="#跳转指令的编码" class="headerlink" title="跳转指令的编码"></a>跳转指令的编码</h3><blockquote><p>在汇编代码中，我们是使用符号标号书写跳转目标的。汇编器和链接器会给跳转目标进行适当编码。</p></blockquote><blockquote><p>最常用的是<strong>PC相对的</strong>：他们会将目标指令的地址与紧跟在跳转指令后面的那条指令的地址之间的差作为编码。这些地址偏移量可以编码为<strong>1、2或4个字节</strong></p></blockquote><blockquote><p>第二种方法是给出“绝对”地址，用4个字节直接指定目标。</p></blockquote><p>下面是个例子:</p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923173706954.png" class="" title="image-20240923173706954"><p>第二行中的03+下面一行的地址05就是目标地址08，</p><p>同样这里由于是一个字节的编码，第五行的f8+第六行的地址d就是目标地址05，</p><h2 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h2><p>这一部分很简单</p><blockquote><p>判断条件后跳转即可，书本例子如下</p></blockquote><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923175710316.png" class="" title="image-20240923175710316"><p>跳转和C语言中的<code>goto</code>十分相似</p><blockquote><p><strong>通用模版:</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">if</span>(test-expr)</span><br><span class="line">&gt;then-statement</span><br><span class="line">&gt;<span class="keyword">else</span></span><br><span class="line">&gt;<span class="keyword">else</span>-statement</span><br></pre></td></tr></table></figure><p>汇编实现通常会使用下面这种形式，我们用C语法来描述控制流</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt;t=test-expr;</span><br><span class="line">&gt;<span class="keyword">if</span>(!t)</span><br><span class="line">   <span class="keyword">goto</span> <span class="literal">false</span></span><br><span class="line">&gt;then-statement</span><br><span class="line"><span class="keyword">goto</span> done;</span><br><span class="line">&gt;<span class="literal">false</span>:</span><br><span class="line"><span class="keyword">else</span>-state-ment</span><br><span class="line">&gt;done:</span><br></pre></td></tr></table></figure></blockquote><h2 id="用条件传送来实现条件分支"><a href="#用条件传送来实现条件分支" class="headerlink" title="用条件传送来实现条件分支"></a>用条件传送来实现条件分支</h2><blockquote><p><strong>为什么要设计条件传送来实现条件分支？</strong></p><p>条件传送（<strong>conditional move</strong>）是一种优化方案，用于替代传统的条件跳转（branching）。在现代处理器中，传统的条件跳转可能导致处理器性能下降，尤其是在<strong>分支预测失败</strong>的情况下。以下是详细的原因和条件传送的优势：</p><h3 id="1-传统条件跳转的低效性"><a href="#1-传统条件跳转的低效性" class="headerlink" title="1. 传统条件跳转的低效性"></a>1. <strong>传统条件跳转的低效性</strong></h3><p>在传统的条件跳转中，处理器根据条件的真假来决定跳转到哪个代码分支。这种方式存在几个潜在的性能问题：</p><ul><li><p><strong>分支预测的代价</strong>：现代处理器使用分支预测来提前执行指令，预测是否会发生跳转。如果预测错误，处理器必须<strong>丢弃错误路径上执行的指令</strong>，重新从正确的路径执行，这个过程会浪费大量的时钟周期。</p></li><li><p><strong>流水线的停顿</strong>：如果处理器不能很好地预测跳转，会导致流水线暂停，等待条件判断的结果。这种停顿会影响指令的执行速度，导致处理器无法充分利用其计算能力。</p></li><li><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923190619014.png" class="" title="image-20240923190619014"></li></ul><h3 id="2-条件传送的引入"><a href="#2-条件传送的引入" class="headerlink" title="2. 条件传送的引入"></a>2. <strong>条件传送的引入</strong></h3><p>为了解决条件跳转带来的低效问题，条件传送指令（如 <code>cmov</code> 在 x86-64 中）被引入。这种指令在特定条件成立时才传送数据，而不依赖跳转操作。它的主要优势包括：</p><ul><li><p><strong>消除分支预测</strong>：条件传送通过执行传送操作而非跳转，可以避免处理器对条件跳转的预测问题，从而减少因预测错误带来的性能损失。</p></li><li><p><strong>减少流水线停顿</strong>：条件传送不会引入跳转，因此处理器可以继续顺序执行，不会因条件判断导致流水线停顿。</p></li></ul><h3 id="3-条件传送的工作原理"><a href="#3-条件传送的工作原理" class="headerlink" title="3. 条件传送的工作原理"></a>3. <strong>条件传送的工作原理</strong></h3><p>条件传送指令的执行依赖于处理器的<strong>条件码寄存器</strong>（Condition Code Register）。根据某些条件码（如零标志、符号标志等），指令判断是否执行数据传送。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;cmovz %rax, %rbx   ; 如果条件码 ZF 为 1，则将 %rax 的值传送到 %rbx</span><br></pre></td></tr></table></figure><p>在这条指令中，如果<strong>零标志（ZF）</strong>为 1，那么 <code>%rax</code> 的值会被传送到 <code>%rbx</code>，否则 <code>%rbx</code> 保持不变。</p><h3 id="4-条件传送的优势"><a href="#4-条件传送的优势" class="headerlink" title="4. 条件传送的优势"></a>4. <strong>条件传送的优势</strong></h3><ul><li><p><strong>提高指令执行效率</strong>：通过消除分支预测失败的代价，条件传送能够显著提高程序执行效率，尤其是在预测失败率较高的情况下。</p></li><li><p><strong>减少分支数</strong>：使用条件传送可以减少代码中的分支数，简化控制流，从而减少处理器在处理复杂分支时的负担。</p></li></ul><h3 id="5-条件传送的局限"><a href="#5-条件传送的局限" class="headerlink" title="5. 条件传送的局限"></a>5. <strong>条件传送的局限</strong></h3><p>尽管条件传送可以提高性能，但它并不适用于所有场景。主要局限包括：</p><ul><li><strong>复杂条件下依然需要跳转</strong>：对于一些复杂的控制流，条件传送无法替代分支跳转。</li><li><strong>传送的数据量限制</strong>：条件传送只能用于处理数据传送，而不能处理更复杂的逻辑。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>条件传送的引入主要是为了减少条件跳转带来的性能损失。通过避免分支预测失败和流水线停顿，条件传送能够提高现代处理器的效率，在一定程度上优化了条件分支控制的执行速度。</p></blockquote><p>这有一个例子</p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923190005060.png" class="" title="image-20240923190005060"><p>CMOVE指令类：</p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923191206550.png" class="" title="image-20240923191206550"><p><strong>注意：</strong> <em>汇编器可以从目标寄存器的名字推断出条件传送指令的操作数长度，所以对所有操作数长度，都可以使用同一个的指令名字</em></p><ul><li>条件传送同条件跳转不同，处理器不需要预测测试的结果就可以执行条件传送。处理器指示读源值，检查条件码，然后要么更新目的寄存器，要么保持不变。</li></ul><blockquote><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923191550780.png" class="" title="image-20240923191550780"><p><strong>但是，所有的条件控制都可以转为条件传送吗？</strong></p><p>考虑这个：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt;<span class="type">long</span> <span class="title function_">cread</span><span class="params">(<span class="type">long</span> *xp)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> (xp?*xp:<span class="number">0</span>)</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>如果我们写出条件传送的汇编代码时</p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923191726614.png" class="" title="image-20240923191726614"><p>很明显，当xp是一个空指针呢，第一条指令就出现引用空指针的错误</p><p>所以，这种情况下，只能依靠分支代码来编译这段代码</p></blockquote><p>当然，条件传送也不一定是高效的</p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923192303183.png" class="" title="image-20240923192303183"><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">    body-statement</span><br><span class="line">    <span class="title function_">while</span> <span class="params">(test-expr)</span></span><br></pre></td></tr></table></figure><p>可以翻译成如下的goto语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loop:</span><br><span class="line">body-statement</span><br><span class="line">t=test-expr;</span><br><span class="line">if(t)</span><br><span class="line">goto loop;</span><br></pre></td></tr></table></figure><p>例子：</p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923195926740.png" class="" title="image-20240923195926740"><p><strong>注意：</strong> 这个汇编代码中的rep只是相当于一个占位符，没有任何作用(虽然其在汇编中的意思是重复执行的意思，但其后面啥都没有)，放在这里是因为在跳转指令后面不能跟ret（这是汇编的一个特性（bug?））</p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(test-expr)</span><br><span class="line">    body-statement</span><br></pre></td></tr></table></figure><ul><li>第一种翻译方法:<code>jump to middle</code></li></ul><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923201148370.png" class="" title="image-20240923201148370"><p>例子：</p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923201408052.png" class="" title="image-20240923201408052"><ul><li>第二种翻译方法：<code>guarded-do</code>,即首先用条件分支，如果初始条件不成立就跳过循环，把代码转换为<code>do-while</code>循环</li></ul><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923201609697.png" class="" title="image-20240923201609697"><p>阶乘例子：</p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923201643682.png" class="" title="image-20240923201643682"><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923201649480.png" class="" title="image-20240923201649480"><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(init-expr;test-expr;update-expr)</span><br><span class="line">    body-statement</span><br></pre></td></tr></table></figure><p>转化为(<strong>有一个例外，后边提</strong>)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">init-expr</span><br><span class="line">while(test-expr)&#123;</span><br><span class="line">body-statement</span><br><span class="line">update-expr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923210457935.png" class="" title="image-20240923210457935"><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923210505762.png" class="" title="image-20240923210505762"><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923210553097.png" class="" title="image-20240923210553097"><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923210600224.png" class="" title="image-20240923210600224"><p>这里采用的<code>jump to middle</code>的办法</p><p><strong>这是那个例外</strong></p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923211701687.png" class="" title="image-20240923211701687"><h1 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h1><p>在简单情况下，我们使用<em>跳转表</em>这种结构实现</p><p><strong>跳转表</strong></p><ul><li>跳转表是一个数组，表项i是一个代码段的地址，这个代码段实现当开关索引值等于i时程序应该采取的动作</li><li>执行开关语句的时间与开关情况的数量无关</li></ul><p>例子：</p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923213558185.png" class="" title="image-20240923213558185"><p><strong>&amp;&amp;前缀</strong>：这个运算符创建一个指向代码位置的指针</p><p>对应的汇编代码：</p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923213917013.png" class="" title="image-20240923213917013"><blockquote><p>*前缀表明这是一个间接跳转</p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923214535233.png" class="" title="image-20240923214535233"></blockquote><p>跳转表的声明：</p><img src="/2024/09/23/ics%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240923214014821.png" class="" title="image-20240923214014821"><blockquote><p>对于这些声明，表明在目标代码文件的段中，应该有一组7个”四”字（8个字节），每个字的值都是与指定的汇编代码标号(例如.L3)相关联的指令地址。标号.L4标记处这个分配地址的起始。与这个标号相对应的地址会作为间接跳转（汇编代码第5行）的基地址。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;条件码&quot;&gt;&lt;a href=&quot;#条件码&quot; class=&quot;headerlink&quot; title=&quot;条件码&quot;&gt;&lt;/a&gt;条件码&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;条件码寄存器&lt;/strong&gt;（Condition Code Register），在 x86-64 架构中，也被称为</summary>
      
    
    
    
    <category term="CSAPP" scheme="https://187370.github.io/categories/CSAPP/"/>
    
    <category term="学习笔记" scheme="https://187370.github.io/categories/CSAPP/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://187370.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSAPP" scheme="https://187370.github.io/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>ics第二周:程序的机器级表示</title>
    <link href="https://187370.github.io/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/"/>
    <id>https://187370.github.io/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</id>
    <published>2024-09-20T11:12:21.000Z</published>
    <updated>2024-09-23T05:08:52.061Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="处理器架构"><a href="#处理器架构" class="headerlink" title="处理器架构"></a>处理器架构</h2><p><strong>处理器架构</strong>（Processor Architecture）是指计算机处理器内部的设计框架或蓝图，它定义了处理器如何执行指令、管理数据、通信等一系列操作。处理器架构是计算机硬件和软件之间的桥梁，决定了处理器如何与操作系统、编译器以及程序交互。</p><h3 id="关键组成部分："><a href="#关键组成部分：" class="headerlink" title="关键组成部分："></a>关键组成部分：</h3><ol><li><strong>指令集架构（ISA）</strong>：</li></ol><ul><li>指令集架构是处理器架构的核心部分，定义了处理器可以理解和执行的基本指令。例如，<code>x86</code> 和 <code>ARM</code> 是两种常见的指令集架构。</li><li>它包括指令的操作码（操作类型）和操作数（需要处理的数据）。ISA 还定义了寄存器的数量和大小、内存访问模式以及数据类型等内容。</li></ul><ol start="2"><li><strong>寄存器和内存模型</strong>：</li></ol><ul><li>不同的处理器架构定义了不同的寄存器数量和大小。寄存器是处理器内部用于快速存储和处理数据的高速存储器。</li><li>内存模型决定了处理器如何与内存通信，例如是采用分段式、分页式内存管理等。</li></ul><ol start="3"><li><strong>并行处理能力</strong>：</li></ol><ul><li>现代处理器架构通常支持多核和多线程，允许多个任务并行处理。架构设计决定了处理器如何调度这些任务和共享资源。</li></ul><ol start="4"><li><strong>扩展和特性</strong>：</li></ol><ul><li>处理器架构还可以决定一些高级特性，如虚拟化支持、加密加速、浮点计算能力、低功耗设计等。</li></ul><h3 id="常见处理器架构："><a href="#常见处理器架构：" class="headerlink" title="常见处理器架构："></a>常见处理器架构：</h3><ol><li><strong>x86</strong> 和 <strong>x86-64</strong>：</li></ol><ul><li>由 Intel 和 AMD 主导，主要用于台式机、笔记本电脑和服务器。</li><li><code>x86</code> 是32位架构，<code>x86-64</code> 是其64位扩展版，能够支持更大的内存空间。</li></ul><ol start="2"><li><strong>ARM</strong>：</li></ol><ul><li>ARM 是一种精简指令集（RISC）架构，广泛用于移动设备、嵌入式系统以及低功耗应用。</li><li>具有高效能效比，因此被应用在智能手机、平板电脑和物联网设备中。</li></ul><ol start="3"><li><strong>RISC-V</strong>：</li></ol><ul><li>RISC-V 是一种开放源代码的 RISC 架构，逐渐受到关注，因为它允许开发者和公司自由定制处理器设计。</li></ul><h3 id="为什么处理器架构重要？"><a href="#为什么处理器架构重要？" class="headerlink" title="为什么处理器架构重要？"></a>为什么处理器架构重要？</h3><p>处理器架构直接影响计算机系统的性能、功耗、兼容性和成本。不同架构的处理器通常专门为特定应用场景进行优化，如桌面应用、移动设备、服务器、大数据处理等。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>处理器架构定义了计算机处理器的工作方式，包括指令执行、数据存储和通信等方面。它是硬件设计的基础，同时影响操作系统和软件如何与处理器交互。常见的处理器架构包括 x86、ARM 和 RISC-V 等。</p><h2 id="Intel处理器的发展"><a href="#Intel处理器的发展" class="headerlink" title="Intel处理器的发展"></a>Intel处理器的发展</h2><p>Intel处理器的发展历史可以追溯到1971年，标志着现代计算技术的兴起。以下是其简要发展历程：</p><h3 id="1-1970s：4004与8086时代"><a href="#1-1970s：4004与8086时代" class="headerlink" title="1. 1970s：4004与8086时代"></a>1. <strong>1970s：4004与8086时代</strong></h3><ul><li><strong>Intel 4004（1971年）</strong>：世界上第一款商用微处理器，由Intel推出。这是一款4位处理器，最早用于计算器中。</li><li><strong>Intel 8086（1978年）</strong>：Intel的第一款16位处理器，它引领了x86架构的诞生。该架构成为Intel处理器的基础，直到今天。</li></ul><h3 id="2-1980s：80386与x86架构的兴起"><a href="#2-1980s：80386与x86架构的兴起" class="headerlink" title="2. 1980s：80386与x86架构的兴起"></a>2. <strong>1980s：80386与x86架构的兴起</strong></h3><ul><li><strong>Intel 80386（1985年）</strong>：第一款32位处理器，引入了虚拟内存支持和多任务处理功能，大大提升了计算能力。它奠定了PC市场的基础，使个人电脑逐渐普及。</li></ul><h3 id="3-1990s：奔腾系列与高速计算"><a href="#3-1990s：奔腾系列与高速计算" class="headerlink" title="3. 1990s：奔腾系列与高速计算"></a>3. <strong>1990s：奔腾系列与高速计算</strong></h3><ul><li><strong>Intel Pentium（1993年）</strong>：这标志着奔腾系列处理器的开始，它们具有强大的浮点运算能力，广泛应用于图形处理、游戏和科学计算领域。</li><li><strong>Pentium Pro（1995年）</strong>：引入了多级缓存和超标量架构，极大提高了并行处理能力。</li></ul><h3 id="4-2000s：多核与移动计算"><a href="#4-2000s：多核与移动计算" class="headerlink" title="4. 2000s：多核与移动计算"></a>4. <strong>2000s：多核与移动计算</strong></h3><ul><li><strong>Intel Core系列（2006年）</strong>：引入多核处理器技术，开始从单核向多核架构转变，提升了并行处理能力。Intel Core系列迅速成为消费类PC的主流处理器。</li><li><strong>Intel Atom（2008年）</strong>：一款低功耗处理器，专为移动设备和嵌入式设备设计，旨在优化电池续航。</li></ul><h3 id="5-2010s：超线程与集成GPU"><a href="#5-2010s：超线程与集成GPU" class="headerlink" title="5. 2010s：超线程与集成GPU"></a>5. <strong>2010s：超线程与集成GPU</strong></h3><ul><li><strong>Intel Core i3&#x2F;i5&#x2F;i7系列</strong>：这几代产品逐渐成为市场主流，集成了超线程技术与集成图形处理器（GPU），使其在性能和图形处理能力上有显著提升。</li><li><strong>Intel Xeon系列</strong>：用于服务器和高性能计算领域，提供了更强的并行处理和多任务处理能力。</li></ul><h3 id="6-2020s：10nm与Alder-Lake架构"><a href="#6-2020s：10nm与Alder-Lake架构" class="headerlink" title="6. 2020s：10nm与Alder Lake架构"></a>6. <strong>2020s：10nm与Alder Lake架构</strong></h3><ul><li><strong>10nm制程技术</strong>：尽管面临一些生产挑战，Intel最终在2020年推出了基于10nm制程的处理器，进一步提升了功耗效率。</li><li><strong>Alder Lake（2021年）</strong>：采用混合架构，结合高性能核心与高能效核心，类似于ARM架构中的big.LITTLE设计，为未来的高效计算奠定了基础。</li></ul><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240920201752297.png" class="" title="image-20240920201752297"><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Intel处理器在过去的50年中经历了从简单的4位计算器芯片到复杂的多核、多线程处理器的巨大转变。Intel通过创新的架构、制程和多核心设计，不断推动计算能力的发展和提升，主导了全球PC市场。</p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><p><strong>指令集</strong>（Instruction Set Architecture, ISA）是处理器能够执行的指令集合，它定义了计算机的硬件如何理解和执行程序。简单来说，指令集是处理器与软件之间的接口，规定了程序如何控制处理器的行为。</p><h3 id="指令集的主要功能："><a href="#指令集的主要功能：" class="headerlink" title="指令集的主要功能："></a>指令集的主要功能：</h3><ol><li><strong>指令的定义</strong>：指令集规定了所有可以执行的操作，如数据传输（例如将数据从内存加载到寄存器）、算术运算、逻辑运算、控制转移（如跳转、条件分支）等。</li><li><strong>数据类型和寄存器</strong>：指令集定义了处理器支持的数据类型（如整数、浮点数）和寄存器的数量、大小等。</li><li><strong>寻址模式</strong>：指令集规定了处理器如何访问内存和寄存器中的数据，即寻址方式（例如直接寻址、间接寻址、基址+偏移等）。</li><li><strong>存储管理</strong>：一些指令集还包括内存管理、缓存和输入输出管理等机制。</li></ol><h3 id="常见的指令集架构："><a href="#常见的指令集架构：" class="headerlink" title="常见的指令集架构："></a>常见的指令集架构：</h3><ol><li><strong>x86</strong>：由 Intel 和 AMD 使用，是 CISC（复杂指令集）架构的典型代表，应用于大多数个人电脑和服务器。</li><li><strong>ARM</strong>：广泛应用于移动设备和嵌入式系统，属于 RISC（精简指令集）架构。</li><li><strong>RISC-V</strong>：开源的 RISC 指令集，越来越受到关注，允许开发者自由定制处理器。</li></ol><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><p>指令集是处理器理解和执行软件的规则和规范。它决定了硬件能执行哪些操作、支持的数据类型、内存访问方式等。不同的处理器架构拥有不同的指令集，这影响了软件的设计与优化方式。</p></blockquote><hr><p><code>导航------------------------------------------------------------------------------------------&gt;</code></p><p>计算机能读懂的只有零和一，而我们用汇编去和计算机『感同身受』。接近硬件底层，很多代码中再平常不过的概念，具体实现起来则并没有看起来那么『理所当然』。</p><h1 id="从C到机器代码"><a href="#从C到机器代码" class="headerlink" title="从C到机器代码"></a>从C到机器代码</h1><p>机器代码，说白了，就是01序列，这也是计算机能读懂的直接可执行的代码，但显然，其不适合人读。所以，把字节按照具体含义进行『翻译』，就成了人类可以阅读的汇编代码。即汇编代码是机器代码的文本表示。注意：『翻译』并不是编译。</p><p>C语言与机器代码是完全不同的逻辑。机器代码就纯粹从<code>执行</code>的角度思考，而C作为一门高级语言，其抽象级别很高。而且高级语言编写的程序是可以在很多不同的机器上编译和执行的。</p><blockquote><p>“一门新语言绝非只是一套语法规则，而是一系列配套的工具加上语法规则。C 语言代码最终成为机器可执行的程序，会像流水线上的产品一样接受各项处理”</p><p><code>gcc如何使C变成机器代码</code></p><ul><li><p>C<code>预处理器</code>通过插入所用<code>#include</code>命令指定文件，并扩展所有<code>#define</code>声明指定的宏来扩展源代码</p></li><li><p>源代码(da.c, wang.c)经过<code>编译器</code>的处理(<code>gcc -0g -S</code>)成为汇编代码(da.s, wang.s)</p></li><li><p>汇编代码(da.s, wang.s)经过<code>汇编器</code>的处理(<code>gcc</code> 或 <code>as</code>)成为对象程序(da.o, wang.o),即<code>目标代码文件</code>，目标代码是机器代码的一种形式，包含所有指令的二进制表示，但是没有填入全局值的地址。</p></li><li><p>对象程序(da.o, wang.o)以及所需静态库(lib.a)经过<code>链接器</code>的处理(<code>gcc</code> 或 <code>ld</code>)最终成为计算机可执行的程序</p></li></ul></blockquote><p>我们来看一段C语言及其编译生成的汇编代码。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码文件: sum.c</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">plus</span><span class="params">(<span class="type">long</span> x, <span class="type">long</span> y)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sumstore</span><span class="params">(<span class="type">long</span> x, <span class="type">long</span> y, <span class="type">long</span> *dest)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> t = plus(x, y);</span><br><span class="line">    *dest = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其对应的汇编代码是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sumstore:</span><br><span class="line">    pushq   %rbx</span><br><span class="line">    movq    %rbx, %rbx</span><br><span class="line">    call    plus</span><br><span class="line">    movq    %rax, (%rbx)</span><br><span class="line">    popq    %rbx</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><p>可以看到，汇编代码有着统一的格式。在汇编代码中，第一个字符串叫做操作符，后面可能跟着1&#x2F;2&#x2F;3个一逗号分隔的操作数，为什么是以这样的形式呢？这就要从处理器的运算方式讲起了，先来看看处理器是如何配合内存进行计算的：</p><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240920214413153.png" class="" title="image-20240920214413153"><ul><li>程序计数器（<code>PC,Program counter</code>）- 存着下一条指令的地址，在x86-64中称为RIP</li><li>寄存器(Register) - 用来存储数据以便操作</li><li>条件代码(Codition codes) - 通常保存最近的算术或逻辑操作的信息，用来做条件跳转</li></ul><blockquote><p>这里需要注意，处理器能够执行的操作其实是非常有限的，简单来说只有三种：存取数据、计算和传输控制。存取数据是在内存和寄存器之间传输数据，进行计算则是对寄存器或者内存中的数据执行算术运算，传输控制主要指非条件跳转和条件分支。这也就是为什么汇编代码有固定的 <code>指令 操作数1 (,操作数2 ,操作数3)</code> 这样的形式了。</p></blockquote><p>比较</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// C 代码</span><br><span class="line">*dest = t;</span><br><span class="line"></span><br><span class="line">// 对应的汇编代码</span><br><span class="line">movq    %rax, (%rbx)</span><br><span class="line"></span><br><span class="line">// 对应的对象代码</span><br><span class="line">0x40059e:   46 89 03</span><br></pre></td></tr></table></figure><p>C 代码的意思很简单，就是把值 <code>t</code> 存储到指针 <code>dest</code> 指向的内存中。对应到汇编代码，就是把 8字节（也就是四个字, Quad words）移动到内存中（这也就是为什叫做 <code>movq</code>）。<code>t</code> 的值保存在寄存器 %rax 中，<code>dest</code> 指向的地址保存在 %rbx 中，而 <code>*dest</code> 是取地址操作，对应于在内存中找到对应的值，也就是 <code>M[%rbx]</code>，在汇编代码中用小括号表示取地址，即 <code>(%rbx)</code>。最后转换成 3 个字节的指令，并保存在 <code>0x40059e</code> 这个地址中。</p><h1 id="访问信息"><a href="#访问信息" class="headerlink" title="访问信息"></a>访问信息</h1><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p><strong>寄存器</strong>是计算机中央处理器（CPU）中的一种非常小且速度极快的存储单元，专门用于存储处理过程中需要立即访问的数据。寄存器的存储容量通常较小（几位到几百位不等），但其读取和写入速度比主内存快得多，因为它们位于处理器的内部。</p><p>其包含一组16个存储64位值的<strong>通用目的寄存器</strong>。</p><blockquote><p>在 <strong>x86-64 架构</strong>的处理器中，有一组 <strong>16个通用目的寄存器</strong>，这些寄存器可以存储 <strong>64位</strong> 的值，适用于多种数据处理任务，包括算术运算、逻辑运算、内存寻址等。它们是程序运行时CPU操作的核心寄存器。</p><h3 id="1-RAX（累加寄存器，Accumulator）"><a href="#1-RAX（累加寄存器，Accumulator）" class="headerlink" title="1. RAX（累加寄存器，Accumulator）"></a>1. <strong>RAX</strong>（累加寄存器，Accumulator）</h3><ul><li>用于算术运算、返回值的存储等。比如，在函数调用后，RAX 中会保存函数的返回值。</li></ul><h3 id="2-RBX（基址寄存器，Base）"><a href="#2-RBX（基址寄存器，Base）" class="headerlink" title="2. RBX（基址寄存器，Base）"></a>2. <strong>RBX</strong>（基址寄存器，Base）</h3><ul><li>通常用于存储内存地址，也可以作为通用寄存器使用。</li></ul><h3 id="3-RCX（计数器寄存器，Counter）"><a href="#3-RCX（计数器寄存器，Counter）" class="headerlink" title="3. RCX（计数器寄存器，Counter）"></a>3. <strong>RCX</strong>（计数器寄存器，Counter）</h3><ul><li>常用于循环和字符串操作。在 <code>rep</code> 指令中，RCX 用作循环计数器。</li></ul><h3 id="4-RDX（数据寄存器，Data）"><a href="#4-RDX（数据寄存器，Data）" class="headerlink" title="4. RDX（数据寄存器，Data）"></a>4. <strong>RDX</strong>（数据寄存器，Data）</h3><ul><li>常与RAX配合，用于乘法、除法等复杂算术运算。</li></ul><h3 id="5-RSI（源索引寄存器，Source-Index）"><a href="#5-RSI（源索引寄存器，Source-Index）" class="headerlink" title="5. RSI（源索引寄存器，Source Index）"></a>5. <strong>RSI</strong>（源索引寄存器，Source Index）</h3><ul><li>通常在内存复制、字符串操作时，用作源地址指针。</li></ul><h3 id="6-RDI（目的索引寄存器，Destination-Index）"><a href="#6-RDI（目的索引寄存器，Destination-Index）" class="headerlink" title="6. RDI（目的索引寄存器，Destination Index）"></a>6. <strong>RDI</strong>（目的索引寄存器，Destination Index）</h3><ul><li>常与RSI配合，用于字符串操作时的目标地址指针。</li></ul><h3 id="7-RBP（基址指针寄存器，Base-Pointer）"><a href="#7-RBP（基址指针寄存器，Base-Pointer）" class="headerlink" title="7. RBP（基址指针寄存器，Base Pointer）"></a>7. <strong>RBP</strong>（基址指针寄存器，Base Pointer）</h3><ul><li>常用于栈操作，尤其是在函数调用时保存调用栈的基地址。它可以帮助访问局部变量和参数。</li></ul><h3 id="8-RSP（栈指针寄存器，Stack-Pointer）"><a href="#8-RSP（栈指针寄存器，Stack-Pointer）" class="headerlink" title="8. RSP（栈指针寄存器，Stack Pointer）"></a>8. <strong>RSP</strong>（栈指针寄存器，Stack Pointer）</h3><ul><li>指向当前栈的顶部，用于函数调用、返回地址的保存及局部变量的管理。</li></ul><h3 id="9-R8-到-R15（扩展通用寄存器）"><a href="#9-R8-到-R15（扩展通用寄存器）" class="headerlink" title="9. R8 到 R15（扩展通用寄存器）"></a>9. <strong>R8 到 R15</strong>（扩展通用寄存器）</h3><ul><li>在x86-64架构中新增的8个通用寄存器。这些寄存器提供额外的空间，进一步提升了多线程和并行计算时的效率。<ul><li><strong>R8</strong>、<strong>R9</strong>、<strong>R10</strong>、<strong>R11</strong>：这些寄存器通常用于函数调用时保存参数值。</li><li><strong>R12</strong>、<strong>R13</strong>、<strong>R14</strong>、<strong>R15</strong>：作为额外的通用寄存器，灵活用于各种数据处理任务。</li></ul></li></ul><h3 id="使用模式"><a href="#使用模式" class="headerlink" title="使用模式"></a>使用模式</h3><ul><li>这些寄存器不仅限于64位操作。根据需要，它们也可以访问寄存器的低32位、16位甚至8位。例如，<code>RAX</code> 的低32位部分可以通过 <code>EAX</code> 访问，低16位部分可以通过 <code>AX</code> 访问，最低8位部分可以通过 <code>AL</code> 访问。</li></ul><h3 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h3><p>这些16个通用寄存器是x86-64架构中进行各种操作的基础。它们支持高效的数据处理，并能大大提高程序执行的速度和效率。</p></blockquote><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240920230243905.png" class="" title="image-20240920230243905"><blockquote><p>当指令以寄存器作为目标时，对于生成小于8字节结果的指令：</p><ul><li>生成1字节和2字节数字的指令会保持剩下的字节不变</li><li>生成4字节数字的指令会把高位4个字节置为0</li></ul></blockquote><p>前六个寄存器(%rax, %rbx, %rcx, %rdx, %rsi, %rdi)称为通用寄存器，有其『特定』的用途：</p><ul><li>%rax(%eax) 用于做累加</li><li>%rcx(%ecx) 用于计数</li><li>%rdx(%edx) 用于保存数据</li><li>%rbx(%ebx) 用于做内存查找的基础地址</li><li>%rsi(%esi) 用于保存源索引值</li><li>%rdi(%edi) 用于保存目标索引值</li></ul><p>而 %rsp(%esp) 和 %rbp(%ebp) 则是作为栈指针和基指针来使用的。</p><h2 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h2><p>操作数分为三种类型：</p><ul><li><p>立即数(<code>immediate</code>),用来表示常数值。书写:$IMM（IMM为常数值），IMM就是该地址存放的值</p></li><li><p>寄存器(<code>register</code>),表示某个寄存器的内容。书写：$$R[r_a]$$</p></li><li><p>内存引用，它会根据计算出来的地址（通常称为<strong>有效地址</strong>）访问某个内存地址</p><p>我们用符号<br>$$<br>M_b[Addr]<br>$$<br>表示对存储在内存中从地址Addr开始的b个字节值的引用。为了方便，我们通常省去下标b</p><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240920235014853.png" class="" title="image-20240920235014853"></li></ul><p>$$<br>Imm(r_b,r_i,s)<br>$$</p><p>表示的是最常用的形式，由四个组成部分：</p><ul><li><p>立即数便宜Imm</p></li><li><p>基址寄存器(<code>必须是64位</code>)<br>$$<br>r_b<br>$$</p></li><li><p>变址寄存器(<code>必须是64位</code>，除了**%rsp**)<br>$$<br>r_i<br>$$</p></li><li><p>比例因子s(<code>s必须是1、2、4或者8</code>)</p></li></ul><p>一个例子：</p><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240921000512981.png" class="" title="image-20240921000512981"><h2 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h2><blockquote><p>Intel用术语”字(word)”表示16位数据类型，因此32位数据称为“双字”，称64位数位“四字”。</p></blockquote><p>MOV类：把数据从源位置复制到目的位置</p><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240921000917396.png" class="" title="image-20240921000917396"><p>源操作数可以是立即数、寄存器值或内存值的任意一种，但目标操作数只能是寄存器值或内存值。指令的具体格式可以这样写 <code>movq [Imm|Reg|Mem], [Reg|Mem]</code>，第一个是源操作数，第二个是目标操作数，例如：</p><ul><li><code>movq Imm, Reg</code> -&gt; <code>mov $0x5, %rax</code> -&gt; <code>temp = 0x5;</code></li><li><code>movq Imm, Mem</code> -&gt; <code>mov $0x5, (%rax)</code> -&gt; <code>*p = 0x5;</code></li><li><code>movq Reg, Reg</code> -&gt; <code>mov %rax, %rdx</code> -&gt; <code>temp2 = temp1;</code></li><li><code>movq Reg, Mem</code> -&gt; <code>mov %rax, (%rdx)</code> -&gt; <code>*p = temp;</code></li><li><code>movq Mem, Reg</code> -&gt; <code>mov (%rax), %rdx</code> -&gt; <code>temp = *p;</code></li></ul><p><code>注意</code>：(%rax)与(%rbx)均表示间接寻址，参见上表</p><p>有一个限制，传送指令的两个操作数不能都指向内存位置。</p><p>因此，将一个值从一个内存位置复制到另一个内存位置需要两条指令</p><ul><li>先将源值加载到寄存器中</li><li>将寄存器值写入目的位置</li></ul><p>再<code>注意</code>:</p><ul><li><p>以上这些 指令的寄存器操作数可以是16个寄存器有标号部分中的任意一个，</p></li><li><p>寄存器部分的大小必须与指令最后一个字符（’b’,’w’,’l’或’q’）指定的大小匹配</p></li><li><p>大多数情况下，MOV指令只会更新目的操作数指定的那些寄存器字节或内存位置，<code>但是！！！</code></p><ul><li><code>movl指令以寄存器作为目的时，它会把该寄存器的高位4字节设置成0</code></li></ul></li><li><p>常规的movq指令只能以表示为32位补码数字的立即数作为操作数，然后把这个值符号扩展得到64位的值，放到目的位置</p></li><li><p>movabsq指令能够以任意64位立即数值作为源操作数，并且只能以寄存器作为目的。</p></li></ul><p><code>将小的源值复制到较大的目的的数据移动指令</code></p><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240921083245940.png" class="" title="image-20240921083245940"><p><code>注意</code>：</p><ul><li>没有指令将4字节源值零扩展到8字节，因为前面提到的<code>movl</code>就天然完成这个</li><li><code>cltq</code>指令没有操作数，其等价于<code>movslq %eax,%rax</code></li></ul><h3 id="数据传送实例"><a href="#数据传送实例" class="headerlink" title="数据传送实例"></a>数据传送实例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">exchange</span><span class="params">(<span class="type">long</span> *xp,<span class="type">long</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">long</span> x=*xp;</span><br><span class="line"> *xp=y;</span><br><span class="line"> <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的汇编代码是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exchannge:</span><br><span class="line">movq(%rdi),%rax//(%rdi)间接寻址找到*xp，并复制到%rax寄存器上，即复制给x</span><br><span class="line">movq%rsi,(%rdi)//再把%rsi上的值即x复制给(%rdi)间接寻址到的地址即*xp</span><br><span class="line">ret//返回</span><br></pre></td></tr></table></figure><ul><li><p>C语言中所谓的“指针”其实就是地址(间接引用指针就是将该指针放在一个寄存器中，然后在内存引用中使用这个寄存器)</p></li><li><p>像x这种局部变量通常是保存在寄存器中，而不是内存中。访问寄存器要比访问内存快的多。</p><h2 id="压入和弹出栈数据"><a href="#压入和弹出栈数据" class="headerlink" title="压入和弹出栈数据"></a>压入和弹出栈数据</h2><p>栈:先进后出</p><p>通过pop操作删除数据时，弹出的值永远是最近被压入而且仍然在栈中的值。</p><p>栈顶:插入和删除元素的那一端。</p><p>在x86-64架构中，程序栈存放在内存中某个区域，<code>栈向下增长</code>，因此栈顶元素时所有栈中元素地址中最低的。栈指针<code>%rsp</code>保存着栈顶元素的地址</p><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240921102110399.png" class="" title="image-20240921102110399"></li></ul><p><code>解释</code>：</p><ul><li>当使用<code>pushqS</code>指令时，要先扩容，即栈顶指针<code>%rsq</code>先减8，再把S存储到<code>(%rsq)</code>中，注意括号哦，因此该指令等价于下面这两条<ul><li><code>subq$8,%rsp</code>（这个是减法指令，用%rsp减去8）</li><li><code>movq   %rbp,(%rsp)</code></li></ul></li><li>当使用<code>popq        D</code>指令时，要先传值，再减容，即先将<code>(%rsp)</code>传给目标地址D,再将栈顶指针加8.因此该指令等价于下面两条<ul><li><code>movq    (%rsp),%rax</code></li><li><code>addq     $8,%rsp</code>（加法操作，就是把%rsp加8）</li></ul></li></ul><p><code>看个例子</code></p><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240921103010840.png" class="" title="image-20240921103010840"><p>一点需要注意的就是，即使pop之后，%rsp虽然不再指向0x100位置，但是0x100位置存的0x123的值仍然在那，直到下次被覆盖。</p><h1 id="算术和逻辑操作"><a href="#算术和逻辑操作" class="headerlink" title="算术和逻辑操作"></a>算术和逻辑操作</h1><p>四组操作：加载有效地址、一元操作、二元操作和移位</p><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240921103812775.png" class="" title="image-20240921103812775"><p>这些指令类有各种带不同大小操作数的变种(<code>只有leaq没有其他大小的变种</code>)</p><p>例如ADD由四条加法指令组成:<code>addb、addw、addl和addq</code></p><h2 id="加载有效地址"><a href="#加载有效地址" class="headerlink" title="加载有效地址"></a>加载有效地址</h2><p>leaq指令并不会真正的访问内存，它的第一个操作数看上去是一个内存引用，但该指令并不是从指定位置读入数据，而是将有效地址写入到目的操作数。也就是说，即是讲第一个操作数存放的值写入目的操作数。</p><p>看看GPT给出的几个例子吧。</p><blockquote><p>这里有两个具体的 <code>leaq</code> 指令例子，帮助理解它在不同情况下的应用：</p><h3 id="示例-1：计算指针偏移"><a href="#示例-1：计算指针偏移" class="headerlink" title="示例 1：计算指针偏移"></a>示例 1：计算指针偏移</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;leaq 8(%rbp), %rax</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li>这条指令计算 <code>rbp + 8</code>，并将结果存储在寄存器 <code>%rax</code> 中。</li><li>它并不访问内存，只是单纯计算地址，这可以用于实现指针运算。例如，若 <code>%rbp</code> 指向一个数组的起始位置，那么此操作可以计算出该数组第 2 个元素的地址（假设每个元素占用 8 字节）。</li></ul><h3 id="示例-2：代替乘法和加法"><a href="#示例-2：代替乘法和加法" class="headerlink" title="示例 2：代替乘法和加法"></a>示例 2：代替乘法和加法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;leaq (%rsi,%rsi,2), %rax</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li>这条指令相当于计算 <code>rsi * 2 + rsi</code>，即 <code>rsi * 3</code>，并将结果存储在 <code>%rax</code> 中。</li><li>通过 <code>leaq</code>，我们可以用一种非常高效的方式来执行乘法操作，而不必使用更慢的 <code>imul</code> 指令。注意，这种用法也只是计算，而不会访问内存。</li></ul><h3 id="示例-3：复杂的地址计算"><a href="#示例-3：复杂的地址计算" class="headerlink" title="示例 3：复杂的地址计算"></a>示例 3：复杂的地址计算</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;leaq 4(%rbx,%rbx,2), %rax</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li>该指令计算 <code>rbx * 2 + rbx + 4</code>，即 <code>3 * rbx + 4</code>，并将结果存储在 <code>%rax</code> 中。</li><li>这是一个结合了加法、乘法和偏移量的有效地址计算，通常用于数组或复杂的指针运算。</li></ul><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ol><li><strong>指针运算</strong>：在访问数组时，计算某个偏移位置的内存地址。</li><li><strong>代替算术运算</strong>：可以替代乘法和加法，用于快速计算值。</li></ol><p>通过这几个例子，<code>leaq</code> 可以高效地完成内存地址计算或算术运算，但不会进行实际的内存访问，这是它的一个重要特点。</p></blockquote><h2 id="一元和二元操作"><a href="#一元和二元操作" class="headerlink" title="一元和二元操作"></a>一元和二元操作</h2><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240921110752350.png" class="" title="image-20240921110752350"><ul><li>一元操作数顾名思义只有一个操作数，既是源也是目的，这个操作数只能是寄存器和内存。</li><li>二元操作数，第一个操作数三种均可，第二个只能是寄存器或是内存位置<ul><li><code>注意：</code></li><li>第二个操作数是内存地址时，处理器必须从内存读出值，执行操作，再把结果写回内存</li></ul></li></ul><h2 id="移位操作"><a href="#移位操作" class="headerlink" title="移位操作"></a>移位操作</h2><p>第一个操作数是移位量（立即数、单字节寄存器(%cl，<code>很特别，只允许这个特定的寄存器作为操作数</code>)），第二个操作数是要移位的数</p><p>注意这个</p><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240921112618420.png" class="" title="image-20240921112618420"><p>我们来看一个C转变成汇编的例子</p><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240921113040521.png" class="" title="image-20240921113040521"><h2 id="特殊的算术操作"><a href="#特殊的算术操作" class="headerlink" title="特殊的算术操作"></a>特殊的算术操作</h2><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240921122453394.png" class="" title="image-20240921122453394"><p><code>imulq</code>指令有两种不同的形式</p><ul><li><code>IMUL</code>指令类的一种，此时<strong>imulq</strong>是一个双操作数，它从两个64位操作数产生一个64位乘积</li><li>单操作数，来计算两个64位的全128位乘积<ul><li>必须要求一个参数在寄存器<code>%rax</code>内，另一个作为指令的源操作数</li><li>乘积及存在<code>%rdx</code>(高64位)和<code>%rax</code>（低64位）</li></ul></li></ul><p>例子：</p><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240921122945088.png" class="" title="image-20240921122945088"><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240921122951561.png" class="" title="image-20240921122951561"><p>这里由于生成代码针对的是小端法机器，所以高位字节存储在大地址。</p><p><code>除法和取模运算</code></p><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240921123213402.png" class="" title="image-20240921123213402"><p>例子：</p><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240921123411413.png" class="" title="image-20240921123411413"><img src="/2024/09/20/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/image-20240921123420047.png" class="" title="image-20240921123420047"><p>把qp保存到另一个寄存器中是因为除法操作要使用参数寄存器%rdx.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;处理器架构&quot;&gt;&lt;a href=&quot;#处理器架构&quot; class=&quot;headerlink&quot; title=&quot;处理</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://187370.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSAPP" scheme="https://187370.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CSAPP/"/>
    
    
    <category term="笔记" scheme="https://187370.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSAPP" scheme="https://187370.github.io/tags/CSAPP/"/>
    
    <category term="ICS" scheme="https://187370.github.io/tags/ICS/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法</title>
    <link href="https://187370.github.io/2024/09/20/algorithm/"/>
    <id>https://187370.github.io/2024/09/20/algorithm/</id>
    <published>2024-09-20T00:10:32.000Z</published>
    <updated>2024-09-20T00:13:49.273Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>&#x3D;&#x3D;数据结构与算法&#x3D;&#x3D;</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">a<span class="built_in">_</span>&#123;1&#125;</span><br></pre></td></tr></table></figure><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h2><ul><li>&#x3D;&#x3D;按照逻辑关系&#x3D;&#x3D;组织起来的一批数据</li><li>按一定的&#x3D;&#x3D;存储方法&#x3D;&#x3D;把它存储在计算机中</li><li>在这些数据上定义了一个&#x3D;&#x3D;运算&#x3D;&#x3D;的集合</li></ul><h3 id="数据结构的逻辑结构"><a href="#数据结构的逻辑结构" class="headerlink" title="数据结构的逻辑结构"></a>数据结构的逻辑结构</h3><table><thead><tr><th>线性结构</th><th>非线性结构</th></tr></thead><tbody><tr><td>线性表</td><td>树，图</td></tr></tbody></table><img src="/2024/09/20/algorithm/image-20240722215359528-1724411273301-2-1724411275427-4-1724411769020-1-1724411809477-102-1724414108616-1.png" class="" title="image-20240722215359528"><h3 id="数据的逻辑结构"><a href="#数据的逻辑结构" class="headerlink" title="数据的逻辑结构"></a>数据的逻辑结构</h3><p>数据的逻辑结构是从具体问题抽象出来的数学模型，反映了事物的组成结构及事物之间的逻辑关系。它可以通过集合论和图论的视角来描述和分析。</p><h4 id="一、数据的数学模型"><a href="#一、数据的数学模型" class="headerlink" title="一、数据的数学模型"></a>一、数据的数学模型</h4><ol><li><p><strong>二元组表示法</strong>：数据的逻辑结构可以用一个二元组 B&#x3D;(K, R) 来表示。</p><ul><li><strong>节点集合 K</strong>：由数据节点（node）组成的有穷集合。每一个节点代表一个数据或一组有明确结构的数据。</li><li><strong>关系集合 R</strong>：定义在集合 K 上的一组二元关系（binary relation）。每个关系 r ∈ R 都是 K 上的二元关系，用来描述数据节点之间的逻辑关系。</li></ul></li><li><p><strong>二元关系</strong>：K 上的二元组是 K 中元素的有序对，记为 &lt;k, k’&gt;（k, k’ ∈ K）。K 上的一个关系即为 K 上一些二元组所组成的集合，不同的二元组集合构成不同的关系。</p></li><li><p><strong>前驱和后继</strong>：如果 r ∈ R，且 k, k’ ∈ K，&lt;k, k’&gt; ∈ r，则称 k 为 k’ 在关系 r 上的前驱，k’ 为 k 在关系 r 上的后继。</p><ul><li><strong>开始结点</strong>：没有前驱的结点。</li><li><strong>终止结点</strong>：没有后继的结点。</li></ul></li></ol><h4 id="二、示例：教学计划中的课程关系"><a href="#二、示例：教学计划中的课程关系" class="headerlink" title="二、示例：教学计划中的课程关系"></a>二、示例：教学计划中的课程关系</h4><ol><li><p><strong>节点集合 K</strong>：包含许多课程，每门课程都作为一个数据节点。例如，计算机专业的课程节点集合可能包括“程序设计”、“数据结构”等。</p></li><li><p><strong>关系集合 R</strong>：包含课程之间的各类关系。例如，先修关系 r 可以表示某些课程必须按规定的先后次序开设。</p><ul><li><strong>先修关系</strong>：例如，&lt;程序设计, 数据结构&gt; 表示“程序设计”课程是“数据结构”课程的先修课程。</li></ul></li></ol><h4 id="三、结点结构与关系表现"><a href="#三、结点结构与关系表现" class="headerlink" title="三、结点结构与关系表现"></a>三、结点结构与关系表现</h4><ol><li><p><strong>结点结构</strong>：每个结点代表一个数据或一组有明确结构的数据。结点可以包含多种类型的数据项，例如课程的名称、代码、学分等。</p></li><li><p><strong>关系表现与限制</strong>：</p><ul><li><strong>有向关系</strong>：通过有向图表示，例如先修关系。图中的顶点表示课程，边表示课程之间的先修关系。</li><li><strong>无向关系</strong>：如果课程之间没有顺序要求，可以用无向图表示。</li><li><strong>层次结构</strong>：某些关系可能表现为层次结构，例如课程的先修关系可以形成一棵树状结构。</li></ul></li></ol><p>通过上述内容，我们可以看出数据的逻辑结构如何抽象和描述事物之间的逻辑关系。这种结构在数据管理和分析中具有重要意义，帮助我们理解和处理复杂的数据关系。</p><h3 id="数据的存储结构"><a href="#数据的存储结构" class="headerlink" title="数据的存储结构"></a>数据的存储结构</h3><p>逻辑结构到物理存储空间的&#x3D;&#x3D;映射&#x3D;&#x3D;</p><p>&#x3D;&#x3D;计算机主存储器（内存）&#x3D;&#x3D;</p><ul><li>非负整数地址编码，相邻单元的集合<ul><li>基本单位是字节</li><li>访问不同地址所需时间基本相同（即随机访问）</li></ul></li></ul><img src="/2024/09/20/algorithm/image-20240722215701957-1724411769020-2-1724411809477-103-1724414108616-2.png" class="" title="image-20240722215701957"><p>对逻辑结构（K,r），其中$$r\in R$$</p><ul><li>对结点集K建立一个从K到存储器M的单元的映射:$$K\rightarrow M$$对于每一个节点$$j\in K$$都对应一个唯一的连续存储区域$$c\in M$$</li></ul><img src="/2024/09/20/algorithm/image-20240722220437383-1724411769020-3-1724411809477-101-1724414108616-3.png" class="" title="image-20240722220437383"><ul><li>关系元组$$(j_1,j_2)\in r$$</li></ul><p>(其中$$j_1,j_2\in K$$是结点)</p><ul><li>顺序：存储单元的顺序地址（&#x3D;&#x3D;线性化&#x3D;&#x3D;）</li></ul><img src="/2024/09/20/algorithm/image-20240722222520256-1724411809474-54-1724414108616-4.png" class="" title="image-20240722222520256"><ul><li>链接：指针的地址指向关系（&#x3D;&#x3D;非线性的结构组织方法&#x3D;&#x3D;）</li></ul><img src="/2024/09/20/algorithm/image-20240722222628356-1724411809474-55-1724414108616-6.png" class="" title="image-20240722222628356"><ul><li>四类：顺序、链接（基础）、索引、散列（重点）</li></ul><h3 id="数据的存储结构-1"><a href="#数据的存储结构-1" class="headerlink" title="数据的存储结构"></a>数据的存储结构</h3><p>数据的存储结构是数据在计算机内存或外部存储器中的组织形式，决定了数据的存储和访问方式。常见的存储结构包括线性存储结构和非线性存储结构。</p><h4 id="一、线性存储结构"><a href="#一、线性存储结构" class="headerlink" title="一、线性存储结构"></a>一、线性存储结构</h4><ol><li><p><strong>数组</strong>：数据元素按顺序连续存储的一种数据结构。</p><ul><li>优点：通过下标快速访问元素。</li><li>缺点：插入和删除操作效率低。</li></ul><p> 示例：<br> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">数组：a[0], a[1], a[2], ..., a[n-1]</span><br></pre></td></tr></table></figure></p></li><li><p><strong>链表</strong>：数据元素通过指针链接成链的一种结构。</p><ul><li>优点：插入和删除操作高效。</li><li>缺点：访问元素需要从头遍历。</li></ul><p> 示例：<br> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">链表：a -&gt; b -&gt; c -&gt; ... -&gt; n</span><br></pre></td></tr></table></figure></p></li><li><p><strong>栈</strong>：只允许在一端进行插入和删除操作的线性结构，遵循后进先出（LIFO）。</p><ul><li>主要操作：push（入栈）、pop（出栈）。</li></ul><p> 示例：<br> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">栈：|a|b|c|d|（d 是栈顶）</span><br></pre></td></tr></table></figure></p></li><li><p><strong>队列</strong>：只允许在一端插入，另一端删除的线性结构，遵循先进先出（FIFO）。</p><ul><li>主要操作：enqueue（入队）、dequeue（出队）。</li></ul><p> 示例：<br> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">队列：a &lt;- b &lt;- c &lt;- d（a 是队头，d 是队尾）</span><br></pre></td></tr></table></figure></p></li></ol><h4 id="二、非线性存储结构"><a href="#二、非线性存储结构" class="headerlink" title="二、非线性存储结构"></a>二、非线性存储结构</h4><ol><li><p><strong>树</strong>：一种层次结构，数据元素存在父子关系。</p><ul><li><strong>二叉树</strong>：每个节点最多有两个子节点。</li><li><strong>B 树</strong>：一种自平衡的树数据结构，广泛用于数据库和文件系统。</li></ul><p> 示例：<br> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">二叉树：</span><br><span class="line"><span class="code">     a</span></span><br><span class="line"><span class="code">    / \</span></span><br><span class="line"><span class="code">   b   c</span></span><br><span class="line"><span class="code">  / \</span></span><br><span class="line"><span class="code"> d   e</span></span><br></pre></td></tr></table></figure></p></li><li><p><strong>图</strong>：由节点和边组成的结构，可以表示复杂的多对多关系。</p><ul><li><strong>有向图</strong>：边有方向性。</li><li><strong>无向图</strong>：边没有方向性。</li></ul><p> 示例：<br> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">图：</span><br><span class="line">a -- b</span><br><span class="line">|  /</span><br><span class="line">c -- d</span><br></pre></td></tr></table></figure></p></li></ol><h4 id="三、存储方式"><a href="#三、存储方式" class="headerlink" title="三、存储方式"></a>三、存储方式</h4><ol><li><p><strong>顺序存储</strong>：数据元素按顺序存储在连续的存储单元中。</p><ul><li>优点：存储密度高，易于实现随机访问。</li><li>缺点：需要预先分配存储空间，可能造成存储空间浪费。</li></ul><p> 示例：<br> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">顺序存储：a[0], a[1], a[2], ..., a[n-1]</span><br></pre></td></tr></table></figure></p></li><li><p><strong>链式存储</strong>：数据元素存储在任意存储单元，通过指针表示元素之间的逻辑关系。</p><ul><li>优点：插入和删除操作灵活，不需要移动大量元素。</li><li>缺点：存储密度低，访问速度较慢。</li></ul><p> 示例：<br> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">链式存储：a -&gt; b -&gt; c -&gt; ... -&gt; n</span><br></pre></td></tr></table></figure></p></li></ol><h4 id="四、文件存储"><a href="#四、文件存储" class="headerlink" title="四、文件存储"></a>四、文件存储</h4><ol><li><p><strong>文本文件</strong>：以字符为基本单位存储数据，适合存储可以直接显示和编辑的文本内容。</p><ul><li>示例：.txt 文件</li></ul></li><li><p><strong>二进制文件</strong>：以字节为基本单位存储数据，适合存储图像、音频、视频等多媒体数据。</p><ul><li>示例：.bin 文件</li></ul></li></ol><p>通过上述内容，我们可以看出数据的存储结构决定了数据的组织方式和访问效率。在实际应用中，应根据具体需求选择合适的数据存储结构，以优化存储和访问性能。</p><h2 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h2><ul><li><p>简称&#x3D;&#x3D;ADT(Abstract Data Type)&#x3D;&#x3D;</p><ul><li>定义了一组运算的数学模型</li><li>与物理存储结构无关</li><li>使软件系统建立在数据之上（面向对象）</li></ul></li><li><p>模块化的思想的发展</p><ul><li>隐藏运算实现的细节和内部数据结构</li><li>软件复用</li></ul></li><li><p>抽象数据结构二元组</p><ul><li>&lt;数据对象D，数据操作P&gt;</li></ul></li><li><p>先定义逻辑结构，再定义运算</p><ul><li>&#x3D;&#x3D;逻辑结构&#x3D;&#x3D;：数据对象及其关系</li><li>&#x3D;&#x3D;运算&#x3D;&#x3D;：数据操作（函数）</li></ul></li></ul><p>例子：&#x3D;&#x3D;栈&#x3D;&#x3D;</p><hr><img src="/2024/09/20/algorithm/image-20240723103110718-1724411809474-56-1724414108616-5.png" class="" title="image-20240723103110718"><h1 id="算法特性和简单分类"><a href="#算法特性和简单分类" class="headerlink" title="算法特性和简单分类"></a>算法特性和简单分类</h1><h1 id="第一单元略过（概论）"><a href="#第一单元略过（概论）" class="headerlink" title="第一单元略过（概论）"></a>第一单元略过（概论）</h1><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><ul><li><p>线性表简称表，是零歌或多个元素又穷序列，通常可以表示成$$k_0,k_1,…,k_{n-1}$$.</p></li><li><img src="/2024/09/20/algorithm/image-20240723103740296-1724411809475-57-1724414108616-7.png" class="" title="image-20240723103740296"></li><li><p>二元组$$B&#x3D;(K,R),K&#x3D;{a_0,a_1,…,a_{n-1}},R&#x3D;{r}$$</p></li><li><p>有一个唯一的&#x3D;&#x3D;开始结点&#x3D;&#x3D;，没有前驱，有一个唯一的直接后继</p></li><li><p>一个唯一的&#x3D;&#x3D;终止结点&#x3D;&#x3D;，它有一个唯一的直接前驱，而没有后继</p></li><li><p>其它的结点皆成为内部节点，每一个内部节点都有且仅有一个唯一的直接有前驱，也有一个唯一的直接有后继</p><p>$$&lt;a_i,a_i+1&gt;,a_i是a_{i+1}的前驱，a_{i+1}是a_i的后继$$</p></li><li><p>前驱&#x2F;后继关系r，具有&#x3D;&#x3D;反对称性&#x3D;&#x3D;和&#x3D;&#x3D;传递性&#x3D;&#x3D;</p></li></ul><img src="/2024/09/20/algorithm/image-20240723105439508-1724411809475-58-1724414108616-8.png" class="" title="image-20240723105439508"><p>&#x3D;&#x3D;特点&#x3D;&#x3D;</p><img src="/2024/09/20/algorithm/image-20240723105528545-1724411809475-59-1724414108616-9.png" class="" title="image-20240723105528545"><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>&#x3D;&#x3D;按复杂度划分&#x3D;&#x3D;</p><ul><li>简单的：线性表、栈、队列、散列表</li><li>高级的：广义表、多维数组、文件……</li></ul><p>&#x3D;&#x3D;按访问方式划分&#x3D;&#x3D;</p><ul><li>直接访问型</li><li>顺序访问型</li><li>目录索引型</li></ul><img src="/2024/09/20/algorithm/image-20240723110207232-1724411809475-60-1724414108616-10.png" class="" title="image-20240723110207232"><p>&#x3D;&#x3D;按操作划分&#x3D;&#x3D;</p><ul><li><p>线性表</p><ul><li>所有表目都是同一类型结点的线性表</li><li>不限制操作形式</li><li>根据存储的不同分为：顺序表，链表</li></ul></li><li><p>栈</p><ul><li>&#x3D;&#x3D;插入和删除&#x3D;&#x3D;操作都限制在表的&#x3D;&#x3D;同一端&#x3D;&#x3D;进行</li></ul></li><li><p>队列</p><ul><li>&#x3D;&#x3D;插入&#x3D;&#x3D;操作在表的&#x3D;&#x3D;一端&#x3D;&#x3D;，&#x3D;&#x3D;删除&#x3D;&#x3D;操作在&#x3D;&#x3D;另一端&#x3D;&#x3D;</li></ul><p>&#x3D;&#x3D;逻辑结构、存储结构、运算有一点不同都是不同的数据结构&#x3D;&#x3D;</p></li></ul><h2 id="线性表的逻辑结构"><a href="#线性表的逻辑结构" class="headerlink" title="线性表的逻辑结构"></a>线性表的逻辑结构</h2><ul><li>主要属性包括<ul><li>线性表的长度（预留存储、数据规模）</li><li>表头</li><li>表尾</li><li>当前位置</li></ul></li></ul><img src="/2024/09/20/algorithm/image-20240723113820272-1724411809475-61-1724414108616-11.png" class="" title="image-20240723113820272"><h2 id="线性表的存储结构"><a href="#线性表的存储结构" class="headerlink" title="线性表的存储结构"></a>线性表的存储结构</h2><p>&#x3D;&#x3D;顺序表&#x3D;&#x3D;</p><ul><li>按索引值从小到大存放在一篇相邻的连续区域</li><li>紧凑结构，存储密度为1</li></ul><img src="/2024/09/20/algorithm/image-20240723113958349-1724411809475-62-1724414108616-12.png" class="" title="image-20240723113958349"><p>&#x3D;&#x3D;链表&#x3D;&#x3D;</p><ul><li><p>单链表<img src="/2024/09/20/algorithm/image-20240723114100516-1724411809475-63-1724414108616-13.png" class="" title="image-20240723114100516">（存储效率不如顺序表，有指针开销)</p></li><li><p>双链表<img src="/2024/09/20/algorithm/image-20240723114130908-1724411809475-64-1724414108616-14.png" class="" title="image-20240723114130908"></p></li><li></li><li><p>循环链表<img src="/2024/09/20/algorithm/image-20240723114145161-1724411809475-65-1724414108616-15.png" class="" title="image-20240723114145161"></p></li></ul><h2 id="线性表的运算"><a href="#线性表的运算" class="headerlink" title="线性表的运算"></a>线性表的运算</h2><img src="/2024/09/20/algorithm/image-20240723114335505-1724411809475-66-1724414108616-18.png" class="" title="image-20240723114335505"><p>&#x3D;&#x3D;线性表的类模版&#x3D;&#x3D;</p><img src="/2024/09/20/algorithm/image-20240723114407092-1724411809475-67-1724414108616-16.png" class="" title="image-20240723114407092"><h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><p>&#x3D;&#x3D;也称向量，采用定长的一维存储结构&#x3D;&#x3D;</p><ul><li><p>主要特性</p><ul><li>元素的类型相同</li><li>元素顺序地存储在连续存储空间中，每一个元素有唯一的索引值</li><li>使用常数作为向量长度</li></ul></li><li><p>数组存储</p></li><li><p>读写其元素很方便，通过下标即可指定位置</p><ul><li>只要确定了首地址，线性表中任意数据元素都可以随机存取</li></ul></li></ul><h2 id="地址的计算"><a href="#地址的计算" class="headerlink" title="地址的计算"></a>地址的计算</h2><img src="/2024/09/20/algorithm/image-20240725093835436-1724411809475-68-1724414108616-17.png" class="" title="image-20240725093835436"><h2 id="顺序表类定义"><a href="#顺序表类定义" class="headerlink" title="顺序表类定义"></a>顺序表类定义</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">arrList</span>:<span class="keyword">public</span> List&lt;T&gt;&#123;<span class="comment">//顺序表，向量</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    T* aList;  <span class="comment">//存储顺序表的实例</span></span><br><span class="line">    <span class="type">int</span> maxXize;  <span class="comment">//顺序表实例的最大长度</span></span><br><span class="line">    <span class="type">int</span> curLen;  <span class="comment">//顺序表实例的当前长度</span></span><br><span class="line">    <span class="type">int</span> position;  <span class="comment">//当前处理位置</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">arrList</span>(<span class="type">const</span> <span class="type">int</span> size)&#123;<span class="comment">//创建新表，设置表实例的最大长度</span></span><br><span class="line">            maxSize = size;</span><br><span class="line">            aList =<span class="keyword">new</span> T[maxSize];</span><br><span class="line">            curlen=position=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    ~<span class="built_in">arrList</span>()&#123;<span class="comment">//析构函数，消除该表实例</span></span><br><span class="line">            <span class="keyword">delete</span> []aList;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数接口"><a href="#函数接口" class="headerlink" title="&#x3D;&#x3D;函数接口&#x3D;&#x3D;"></a>&#x3D;&#x3D;函数接口&#x3D;&#x3D;</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> []aList;</span><br><span class="line">    curLen=position=;</span><br><span class="line">    aList=<span class="keyword">new</span> T[maxSize];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span></span>;<span class="comment">// 返回当前实际长度</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">append</span><span class="params">(<span class="type">const</span> T value)</span></span>;<span class="comment">//在表尾添加元素value</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p,cont T value)</span></span>;<span class="comment">//p位置插入元素value</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">delete</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p)</span></span>;<span class="comment">//删除位置p上元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">setValue</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p,<span class="type">const</span> T value)</span></span>;<span class="comment">//设元素值</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">getValue</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p,T &amp;value)</span><span class="comment">//返回元素</span></span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">getPos</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">const</span> Tvalue)</span></span>;<span class="comment">//查找元素</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="重点讨论"><a href="#重点讨论" class="headerlink" title="&#x3D;&#x3D;重点讨论&#x3D;&#x3D;"></a>&#x3D;&#x3D;重点讨论&#x3D;&#x3D;</h3><ul><li><p>插入元素运算</p><ul><li><code>bool insert(const int p,const T value)</code></li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设元素的类型为T,aList是存储顺序表的数组，maxSize是其最大长度；</span></span><br><span class="line"><span class="comment">//p为新元素value的插入位置，插入成功则返回true，否则返回false</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> arrList&lt;T&gt;::<span class="built_in">insert</span>()(<span class="type">const</span> <span class="type">int</span> p,<span class="type">const</span> T value)&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(curLen&gt;=maxsize)&#123;</span><br><span class="line">        <span class="comment">//检查顺序表是否溢出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;<span class="number">0</span>||p&gt;curLen)&#123;</span><br><span class="line">        <span class="comment">//检查插入位置是否合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=curLen;i&gt;p;i--)</span><br><span class="line">        aList[i]=aList[i<span class="number">-1</span>];</span><br><span class="line">        aList[p]=value;</span><br><span class="line">        curLen++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除元素运算</p><ul><li><code>bool delete(const int p)</code></li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">bool</span> arrList&lt;T&gt;::<span class="built_in">delete</span>(<span class="type">const</span> <span class="type">int</span> p)&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(curLen&lt;=<span class="number">0</span>||p&lt;<span class="number">0</span>||p&gt;curLen<span class="number">-1</span>)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(i=p;i&lt;curLen<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        aList[i]=aList[i<span class="number">+1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    curLen--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="&#x3D;&#x3D;算法分析&#x3D;&#x3D;"></a>&#x3D;&#x3D;算法分析&#x3D;&#x3D;</h3><ul><li>表中元素的移动<ul><li>插入：移动<code>n-i</code></li><li>删除:移动<code>n-i-1</code></li></ul></li><li><code>i</code>的位置上插入和删除的概率分别是$$p_i$$ 和$$p_{i}^{‘}$$ <ul><li>插入的平均移动次数为$$M_i &#x3D; \sum_{i&#x3D;0}^{n}(n-i)p_i$$</li><li>删除的平均移动次数为$$M_d&#x3D;\sum_{i&#x3D;0}^{n-1}(n-i-1)p_i^{‘}$$</li></ul></li></ul><p>&#x3D;&#x3D;特殊情况&#x3D;&#x3D;</p><blockquote><ul><li><p>如果在顺序表中每个位置上插入和删除元素的概率相同，即$$p_i&#x3D;\frac{1}{n+1},p_i^{‘}&#x3D;\frac{1}{n}$$</p></li><li><p>$$<br> M_i&#x3D;\frac{1}{n+1}\sum_{i&#x3D;0}^{n}(n-i)&#x3D;\frac{1}{n+1}(\sum_{i&#x3D;0}^{n}n-\sum_{i&#x3D;0}^{n}i)<br>&#x3D;&#x3D;\frac{n(n+1)}{n+1}-\frac{n(n+1)}{2(n+1)}&#x3D;\frac{n}{2}<br>$$</p></li></ul><p>$$<br>M_d&#x3D;\frac{1}{n}\sum_{i&#x3D;0}^{n-1}(n-i-1)&#x3D;\frac{1}{n}(\sum_{i&#x3D;0}^{n-1}n-\sum_{i&#x3D;0}^{n-1}i-n)&#x3D;\frac{n^2}{n}-\frac{n-1}{2}-1&#x3D;\frac{n-1}{2}<br>$$</p><ul><li>时间代价为o(n)</li></ul></blockquote><p>&#x3D;&#x3D;函数具体实现&#x3D;&#x3D;</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">arrList</span> : <span class="keyword">public</span> List&lt;T&gt; &#123;  <span class="comment">// 顺序表，向量</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* aList;        <span class="comment">// 存储顺序表的实例</span></span><br><span class="line">    <span class="type">int</span> maxSize;     <span class="comment">// 顺序表实例的最大长度</span></span><br><span class="line">    <span class="type">int</span> curLen;      <span class="comment">// 顺序表实例的当前长度</span></span><br><span class="line">    <span class="type">int</span> position;    <span class="comment">// 当前处理位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">arrList</span>(<span class="type">const</span> <span class="type">int</span> size) &#123;  <span class="comment">// 创建新表，设置表实例的最大长度</span></span><br><span class="line">        maxSize = size;</span><br><span class="line">        aList = <span class="keyword">new</span> T[maxSize];</span><br><span class="line">        curLen = position = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">arrList</span>() &#123;  <span class="comment">// 析构函数，消除该表实例</span></span><br><span class="line">        <span class="keyword">delete</span>[] aList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;  <span class="comment">// 清空顺序表</span></span><br><span class="line">        <span class="keyword">delete</span>[] aList;</span><br><span class="line">        curLen = position = <span class="number">0</span>;</span><br><span class="line">        aList = <span class="keyword">new</span> T[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;  <span class="comment">// 返回当前实际长度</span></span><br><span class="line">        <span class="keyword">return</span> curLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">append</span><span class="params">(<span class="type">const</span> T value)</span> </span>&#123;  <span class="comment">// 在表尾添加元素value</span></span><br><span class="line">        <span class="keyword">if</span> (curLen &gt;= maxSize) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        aList[curLen++] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p, <span class="type">const</span> T value)</span> </span>&#123;  <span class="comment">// p位置插入元素value</span></span><br><span class="line">        <span class="keyword">if</span> (curLen &gt;= maxSize || p &lt; <span class="number">0</span> || p &gt; curLen) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = curLen; i &gt; p; --i) &#123;</span><br><span class="line">            aList[i] = aList[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        aList[p] = value;</span><br><span class="line">        ++curLen;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p)</span> </span>&#123;  <span class="comment">// 删除位置p上元素</span></span><br><span class="line">        <span class="keyword">if</span> (p &lt; <span class="number">0</span> || p &gt;= curLen) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt; curLen - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            aList[i] = aList[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        --curLen;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">setValue</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p, <span class="type">const</span> T value)</span> </span>&#123;  <span class="comment">// 设元素值</span></span><br><span class="line">        <span class="keyword">if</span> (p &lt; <span class="number">0</span> || p &gt;= curLen) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        aList[p] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">getValue</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p, T&amp; value)</span> </span>&#123;  <span class="comment">// 返回元素</span></span><br><span class="line">        <span class="keyword">if</span> (p &lt; <span class="number">0</span> || p &gt;= curLen) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        value = aList[p];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">getPos</span><span class="params">(<span class="type">int</span>&amp; p, <span class="type">const</span> T value)</span> </span>&#123;  <span class="comment">// 查找元素</span></span><br><span class="line">        <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; curLen; ++p) &#123;</span><br><span class="line">            <span class="keyword">if</span> (aList[p] == value) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><ul><li>通过&#x3D;&#x3D;指针&#x3D;&#x3D;把它的一串存储结点链接成一个链</li><li>存储结点由两部分组成：<ul><li>数据域+指针域（后继地址）</li></ul></li></ul><p>|data | next |</p><h2 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h2><h3 id="单链"><a href="#单链" class="headerlink" title="单链"></a>单链</h3><p>&#x3D;&#x3D;简单的单链表&#x3D;&#x3D;</p><ul><li>整个单链表：head</li><li>第一个结点：head</li><li>空表判断：head&#x3D;NULL</li><li>当前节点$$a_1$$:<code>curr</code></li></ul><img src="/2024/09/20/algorithm/image-20240725185256026-1724411809475-69-1724414108616-21.png" class="" title="image-20240725185256026"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="keyword">class</span> <span class="title class_">Link</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    T data;<span class="comment">//用于保存结点元素的内容</span></span><br><span class="line">    Link&lt;T&gt;*next;<span class="comment">//指向后继结点的指针</span></span><br><span class="line">    <span class="built_in">Link</span>(<span class="type">const</span> T info,<span class="type">const</span> Link&lt;T&gt;*nextValue=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        data=info;</span><br><span class="line">        next=nextValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Line</span>(<span class="type">const</span> Link&lt;T&gt;*nextValue)&#123;</span><br><span class="line">        next=nextValue;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;例子&#x3D;&#x3D;</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义模板类 Link</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Link</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T data;                 <span class="comment">// 保存节点元素的内容</span></span><br><span class="line">    Link&lt;T&gt;* next;          <span class="comment">// 指向后继节点的指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数：初始化数据和后继节点指针</span></span><br><span class="line">    <span class="built_in">Link</span>(<span class="type">const</span> T info, Link&lt;T&gt;* nextValue = <span class="literal">NULL</span>) &#123;</span><br><span class="line">        data = info;</span><br><span class="line">        next = nextValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数：仅初始化后继节点指针</span></span><br><span class="line">    <span class="built_in">Link</span>(Link&lt;T&gt;* nextValue) &#123;</span><br><span class="line">        next = nextValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建三个节点</span></span><br><span class="line">    <span class="function">Link&lt;<span class="type">int</span>&gt; <span class="title">node1</span><span class="params">(<span class="number">10</span>)</span></span>;  <span class="comment">// data = 10, next = NULL</span></span><br><span class="line">    <span class="function">Link&lt;<span class="type">int</span>&gt; <span class="title">node2</span><span class="params">(<span class="number">20</span>)</span></span>;  <span class="comment">// data = 20, next = NULL</span></span><br><span class="line">    <span class="function">Link&lt;<span class="type">int</span>&gt; <span class="title">node3</span><span class="params">(<span class="number">30</span>)</span></span>;  <span class="comment">// data = 30, next = NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将节点连接成单链表</span></span><br><span class="line">    node<span class="number">1.</span>next = &amp;node2;  <span class="comment">// node1 的 next 指向 node2</span></span><br><span class="line">    node<span class="number">2.</span>next = &amp;node3;  <span class="comment">// node2 的 next 指向 node3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出链表中的元素</span></span><br><span class="line">    Link&lt;<span class="type">int</span>&gt;* current = &amp;node1;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; current-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;单链表类定义&#x3D;&#x3D;</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="keyword">class</span> <span class="title class_">lnkList</span>:<span class="keyword">public</span> List&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    Link&lt;T&gt;* head,*tail;<span class="comment">//单链表的头、尾指针</span></span><br><span class="line">    <span class="function">Link&lt;T&gt;* <span class="title">setPos</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p)</span></span>;<span class="comment">//第p个元素指针</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">lnkList</span>(<span class="type">int</span> s);<span class="comment">//构造函数</span></span><br><span class="line">    ~<span class="built_in">lnkList</span>();<span class="comment">//析构函数</span></span><br><span class="line">   <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">//判断链表是否为空</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;<span class="comment">//将链表存储的内容清除，成为空表</span></span><br><span class="line">    <span class="type">int</span> length;<span class="comment">//返回此顺序表的当前实际长度</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">append</span><span class="params">(<span class="type">const</span> T value)</span></span>;<span class="comment">//表尾添加一个元素value,表长度增</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p,<span class="type">const</span> T value)</span></span>;<span class="comment">//位置p上插入一个元素</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">delete</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p)</span><span class="comment">//删除位置p上呢元素，表的长度减一</span></span></span><br><span class="line"><span class="function">    <span class="type">bool</span> <span class="title">getValue</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p,T&amp; value)</span><span class="comment">//返回位置p的元素值</span></span></span><br><span class="line"><span class="function">    <span class="type">bool</span> <span class="title">getPos</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">const</span> T value)</span><span class="comment">//查找值为value的元素</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p><code>lnkList</code>模板类的具体实现，涵盖了各个方法的功能：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Link类定义，表示单链表的节点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Link</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T data;                <span class="comment">// 节点的数据</span></span><br><span class="line">    Link&lt;T&gt;* next;         <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数：初始化节点的数据和后继节点指针</span></span><br><span class="line">    <span class="built_in">Link</span>(<span class="type">const</span> T&amp; info, Link&lt;T&gt;* nextValue = <span class="literal">nullptr</span>)</span><br><span class="line">        : <span class="built_in">data</span>(info), <span class="built_in">next</span>(nextValue) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数：仅初始化后继节点指针</span></span><br><span class="line">    <span class="built_in">Link</span>(Link&lt;T&gt;* nextValue = <span class="literal">nullptr</span>)</span><br><span class="line">        : <span class="built_in">next</span>(nextValue) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// List类定义，用于表示链表的基本接口</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">List</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">length</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">append</span><span class="params">(<span class="type">const</span> T value)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p, <span class="type">const</span> T value)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">deletePos</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">getValue</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p, T&amp; value)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">getPos</span><span class="params">(<span class="type">int</span>&amp; p, <span class="type">const</span> T value)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lnkList类定义，单链表的具体实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lnkList</span> : <span class="keyword">public</span> List&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Link&lt;T&gt;* head;    <span class="comment">// 链表头指针</span></span><br><span class="line">    Link&lt;T&gt;* tail;    <span class="comment">// 链表尾指针</span></span><br><span class="line">    <span class="type">int</span> listSize;     <span class="comment">// 链表的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回指向第p个元素的指针</span></span><br><span class="line">    <span class="function">Link&lt;T&gt;* <span class="title">setPos</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p &lt; <span class="number">0</span> || p &gt; listSize) <span class="keyword">return</span> <span class="literal">nullptr</span>;  <span class="comment">// 检查越界</span></span><br><span class="line">        Link&lt;T&gt;* temp = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p; ++i) temp = temp-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">lnkList</span>(<span class="type">int</span> s = <span class="number">0</span>) : <span class="built_in">head</span>(<span class="literal">nullptr</span>), <span class="built_in">tail</span>(<span class="literal">nullptr</span>), <span class="built_in">listSize</span>(s) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    ~<span class="built_in">lnkList</span>() &#123; <span class="built_in">clear</span>(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断链表是否为空</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> listSize == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除链表</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Link&lt;T&gt;* temp;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            temp = head;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = <span class="literal">nullptr</span>;</span><br><span class="line">        listSize = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回链表的长度</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> listSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在表尾添加元素</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">append</span><span class="params">(<span class="type">const</span> T value)</span> </span>&#123;</span><br><span class="line">        Link&lt;T&gt;* newNode = <span class="keyword">new</span> <span class="built_in">Link</span>&lt;T&gt;(value);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">            head = tail = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tail-&gt;next = newNode;</span><br><span class="line">            tail = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        listSize++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在位置p上插入元素</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p, <span class="type">const</span> T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p &lt; <span class="number">0</span> || p &gt; listSize) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 检查越界</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">0</span>) &#123;</span><br><span class="line">            head = <span class="keyword">new</span> <span class="built_in">Link</span>&lt;T&gt;(value, head);</span><br><span class="line">            <span class="keyword">if</span> (tail == <span class="literal">nullptr</span>) tail = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Link&lt;T&gt;* prev = <span class="built_in">setPos</span>(p - <span class="number">1</span>);</span><br><span class="line">            prev-&gt;next = <span class="keyword">new</span> <span class="built_in">Link</span>&lt;T&gt;(value, prev-&gt;next);</span><br><span class="line">            <span class="keyword">if</span> (prev-&gt;next-&gt;next == <span class="literal">nullptr</span>) tail = prev-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        listSize++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除位置p的元素</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">deletePos</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p &lt; <span class="number">0</span> || p &gt;= listSize) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 检查越界</span></span><br><span class="line"></span><br><span class="line">        Link&lt;T&gt;* temp;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">0</span>) &#123;</span><br><span class="line">            temp = head;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) tail = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Link&lt;T&gt;* prev = <span class="built_in">setPos</span>(p - <span class="number">1</span>);</span><br><span class="line">            temp = prev-&gt;next;</span><br><span class="line">            prev-&gt;next = temp-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (temp == tail) tail = prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">        listSize--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回位置p的元素值</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">getValue</span><span class="params">(<span class="type">const</span> <span class="type">int</span> p, T&amp; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p &lt; <span class="number">0</span> || p &gt;= listSize) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 检查越界</span></span><br><span class="line"></span><br><span class="line">        Link&lt;T&gt;* temp = <span class="built_in">setPos</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        value = temp-&gt;data;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找值为value的元素位置</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">getPos</span><span class="params">(<span class="type">int</span>&amp; p, <span class="type">const</span> T value)</span> </span>&#123;</span><br><span class="line">        Link&lt;T&gt;* temp = head;</span><br><span class="line">        p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">nullptr</span> &amp;&amp; temp-&gt;data != value) &#123;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">            p++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例使用</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lnkList&lt;<span class="type">int</span>&gt; myList;</span><br><span class="line"></span><br><span class="line">    myList.<span class="built_in">append</span>(<span class="number">1</span>);</span><br><span class="line">    myList.<span class="built_in">append</span>(<span class="number">2</span>);</span><br><span class="line">    myList.<span class="built_in">append</span>(<span class="number">3</span>);</span><br><span class="line">    myList.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">4</span>); <span class="comment">// 在第1个位置插入值4</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; myList.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">        myList.<span class="built_in">getValue</span>(i, value);</span><br><span class="line">        cout &lt;&lt; value &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码解释："><a href="#代码解释：" class="headerlink" title="代码解释："></a>代码解释：</h3><ol><li><strong><code>Link</code>类</strong>：单链表节点的定义，包含数据和指向下一个节点的指针。</li><li><strong><code>List</code>类</strong>：一个抽象基类，定义了链表的基本接口。</li><li><strong><code>lnkList</code>类</strong>：单链表的具体实现，继承自<code>List</code>。包含头尾指针、链表长度等成员，以及各种操作方法。</li><li><strong>操作方法</strong>：<ul><li><code>setPos</code>：获取指向第<code>p</code>个元素的指针。</li><li><code>isEmpty</code>：检查链表是否为空。</li><li><code>clear</code>：清空链表。</li><li><code>length</code>：返回链表长度。</li><li><code>append</code>：在链表尾部添加元素。</li><li><code>insert</code>：在指定位置插入元素。</li><li><code>deletePos</code>：删除指定位置的元素。</li><li><code>getValue</code>：获取指定位置的元素值。</li><li><code>getPos</code>：查找指定值的元素位置。</li></ul></li></ol><p>&#x3D;&#x3D;带头结点的单链表&#x3D;&#x3D;</p><ul><li>整个单链表：<code>head</code></li><li>第一个结点:$$head-&gt;next,head\neq NULL$$</li><li>空表判断：head-&gt;next&#x3D;&#x3D;NULL</li></ul><p>当前节点$$a_1$$:<code>fence-&gt;next</code>(curr隐含)</p><img src="/2024/09/20/algorithm/image-20240725190211238-1724411809475-70-1724414108617-22.png" class="" title="image-20240725190211238"><ul><li>双链表和循环链表的操作类似</li></ul><h1 id="顺序表和链表的比较"><a href="#顺序表和链表的比较" class="headerlink" title="顺序表和链表的比较"></a>顺序表和链表的比较</h1><h2 id="总体比较"><a href="#总体比较" class="headerlink" title="总体比较"></a>总体比较</h2><ul><li><p>顺序表的主要优点</p><ul><li>没有使用指针，不用花费额外开销</li><li>线性表元素的读访问非常简洁便利</li></ul></li><li><p>链表的主要优点</p><ul><li>无需事先了解线性表的长度</li><li>允许线性表的长度动态变化</li><li>能够适应经常插入删除内部元素的情况</li></ul></li><li><p>总结</p><ul><li>顺序表是存储静态数据的不二选择</li><li>链表是存储动态变化数据的良方</li></ul></li><li><p>顺序表</p><ul><li>插入、删除运算时间代价O(n),查找则可常数时间完成</li><li>预先申请固定长度的连续空间</li><li>如果整个数组元素很慢，则没有结构性存储开销</li></ul></li><li><p>链表</p><ul><li>插入、删除运算时间代价O(1),但找地i个元素运算时间代价O(n)</li><li>存储；利用指针，动态地按照需要为表中新的元素分配存储空间</li><li>每个元素都有结构性存储开销</li></ul></li></ul><img src="/2024/09/20/algorithm/image-20240725213017535-1724411809475-71-1724414108616-19.png" class="" title="image-20240725213017535"><img src="/2024/09/20/algorithm/image-20240725213134562-1724411809475-72-1724414108616-20.png" class="" title="image-20240725213134562"><img src="/2024/09/20/algorithm/image-20240725213302087-1724411809475-73-1724414108617-23.png" class="" title="image-20240725213302087"><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>【讨论】求数组最大子数组之和 求数组最大子数组之和       1, -2, 3, 10, -4, 7, 2, -5  和最大的子数组为【3, 10, -4, 7, 2】  输出为该子数组的和18  请分别思考分治法、动态规划法及其效率</p><h3 id="笨方法"><a href="#笨方法" class="headerlink" title="笨方法"></a>笨方法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;nums;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        cin &gt;&gt; temp;</span><br><span class="line">        nums.<span class="built_in">push_back</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> result = <span class="number">-10000000</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n;i++)&#123;</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>] + nums[i], nums[i]);</span><br><span class="line">        result = <span class="built_in">max</span>(result, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">&#125;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;nums;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        cin &gt;&gt; temp;</span><br><span class="line">        nums.<span class="built_in">push_back</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">numm</span>(nums.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(nums.<span class="built_in">size</span>(), <span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> maxx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">     numm[i][i] = nums[i];</span><br><span class="line">     maxx = <span class="built_in">max</span>(numm[i][i], maxx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i<span class="number">+1</span>; j &lt; n;j++)&#123;</span><br><span class="line">            numm[i][j] = numm[i][j - <span class="number">1</span>] + nums[j];</span><br><span class="line">            maxx = <span class="built_in">max</span>(numm[i][j], maxx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; maxx &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;nums;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        cin &gt;&gt; temp;</span><br><span class="line">        nums.<span class="built_in">push_back</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> result = <span class="number">-10000000</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n;i++)&#123;</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>] + nums[i], nums[i]);</span><br><span class="line">        result = <span class="built_in">max</span>(result, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h3><h4 id="分治法解决最大子数组和问题"><a href="#分治法解决最大子数组和问题" class="headerlink" title="分治法解决最大子数组和问题"></a>分治法解决最大子数组和问题</h4><p>分治法的核心思想是将数组递归地分成两个部分，分别求解每个部分的最大子数组和，然后合并这些部分的解。</p><h5 id="步骤详解"><a href="#步骤详解" class="headerlink" title="步骤详解"></a>步骤详解</h5><ol><li><p><strong>基准情况（Base Case）</strong>: </p><ul><li>如果数组只有一个元素，那么最大子数组和就是这个元素。</li></ul></li><li><p><strong>分割数组（Divide）</strong>: </p><ul><li>将数组分为左右两个部分：<code>left</code> 到 <code>mid</code> 和 <code>mid + 1</code> 到 <code>right</code>。</li><li>中点 <code>mid</code> 的计算方式是 <code>mid = left + (right - left) / 2</code>。</li></ul></li><li><p><strong>递归求解（Conquer）</strong>: </p><ul><li>递归地在左半部分和右半部分分别求解最大子数组和。</li><li><code>left_max</code>：左半部分的最大子数组和。</li><li><code>right_max</code>：右半部分的最大子数组和。</li></ul></li><li><p><strong>计算跨越中点的子数组（Combine）</strong>: </p><ul><li><strong>左侧最大子数组和</strong>：从中点向左扫描，找到最大子数组和。</li><li><strong>右侧最大子数组和</strong>：从中点向右扫描，找到最大子数组和。</li><li>跨中点的最大子数组和是左侧最大和与右侧最大和的总和。</li></ul></li><li><p><strong>合并结果</strong>: </p><ul><li>返回左半部分、右半部分和跨越中点部分的最大值。</li></ul></li></ol><h5 id="代码实现（C-）"><a href="#代码实现（C-）" class="headerlink" title="代码实现（C++）"></a>代码实现（C++）</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxcross</span><span class="params">(vector&lt;<span class="type">int</span>&gt;nums,<span class="type">int</span> left,<span class="type">int</span> mid,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> left_sum = INT_MIN;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = mid; i &gt;= left;i--)&#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;left_sum)&#123;</span><br><span class="line">            left_sum = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right_sum = INT_MIN;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = mid + <span class="number">1</span>; i &lt;= right;i++)&#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;right_sum)&#123;</span><br><span class="line">            right_sum = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left_sum + right_sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxarraysum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;nums,<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left==right)&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> left_max = <span class="built_in">maxarraysum</span>(nums, left, mid);</span><br><span class="line">    <span class="type">int</span> right_max = <span class="built_in">maxarraysum</span>(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="type">int</span> cross_max = <span class="built_in">maxcross</span>(nums, left, mid, right);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(&#123;left_max, right_max, cross_max&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        cin &gt;&gt; temp;</span><br><span class="line">        nums.<span class="built_in">push_back</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">maxarraysum</span>(nums, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><ul><li>分治法的时间复杂度为 O(n log n)。在每一级递归中，计算跨中点的最大子数组和需要 O(n) 时间，总共有 O(log n) 级递归。</li></ul><h3 id="判断链表中有无回路"><a href="#判断链表中有无回路" class="headerlink" title="判断链表中有无回路"></a>判断链表中有无回路</h3><p>定义两个指针，一个指针每次移动一个节点，另一个指针每次移动两个节点。如果链表中存在回路，那么快指针最终会追上慢指针，两个指针会相遇。如果链表中不存在回路，那么快指针会先到达链表的末尾，此时我们就可以判断链表中不存在回路。时间复杂度为 O(n)，空间复杂度为 O(1) 。</p><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><ul><li><p>栈</p><ul><li>运算只能在&#x3D;&#x3D;表&#x3D;&#x3D;的一端进行</li><li>后进先出</li><li>主要操作：进栈和出栈</li></ul><img src="/2024/09/20/algorithm/image-20240727191056721-1724411809475-74-1724414108617-25.png" class="" title="image-20240727191056721"></li></ul> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;<span class="comment">//变为空栈</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T item)</span></span>;<span class="comment">//item 入栈，成功返回真，否则假</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(T&amp; item)</span></span>;<span class="comment">//返回栈顶内容并弹出，成功返回真，否则假</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">top</span><span class="params">(T&amp; item)</span></span>;<span class="comment">//返回栈顶但不弹出，成功返回真，否则假</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">//若栈已空返回真</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">ifFull</span><span class="params">()</span></span>;<span class="comment">//若栈已满返回真</span></span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 清空栈</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        data.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入栈操作，成功返回 true</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T item)</span> </span>&#123;</span><br><span class="line">        data.<span class="built_in">push_back</span>(item);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出栈操作，成功返回 true 并将 item 设置为栈顶元素</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(T&amp; item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 栈为空，无法出栈</span></span><br><span class="line">        &#125;</span><br><span class="line">        item = data.<span class="built_in">back</span>();</span><br><span class="line">        data.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看栈顶元素，成功返回 true 并将 item 设置为栈顶元素</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">top</span><span class="params">(T&amp; item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 栈为空，无法查看栈顶</span></span><br><span class="line">        &#125;</span><br><span class="line">        item = data.<span class="built_in">back</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断栈是否为空</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断栈是否已满（对于使用 std::vector 的实现，一般不设置栈满限制）</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">ifFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 使用 vector 无容量限制，所以总返回 false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;T&gt; data; <span class="comment">// 使用 vector 作为底层存储</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="入栈顺序"><a href="#入栈顺序" class="headerlink" title="&#x3D;&#x3D;入栈顺序&#x3D;&#x3D;"></a>&#x3D;&#x3D;入栈顺序&#x3D;&#x3D;</h2><img src="/2024/09/20/algorithm/image-20240727193100971-1724411809475-75-1724414108617-24.png" class="" title="image-20240727193100971"><p>引理：设k是最后一个出栈的，那么k把序列一分为二；在k之前入栈的元素，一定比在k之后入栈的元素，要提前出栈！</p><p>利用这个引理，递归判断出栈顺序是否合法</p><h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><ul><li>给定一个入栈序列，和一个出栈序列，请你写出一个程序，判断出栈序列是否合法？</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_legal</span><span class="params">(vector&lt;<span class="type">int</span>&gt;in_stac,vector&lt;<span class="type">int</span>&gt;out_stac,<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(in_stac.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(left==right)&#123;</span><br><span class="line">        <span class="keyword">return</span> in_stac[left] == out_stac[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> last_element = out_stac[right];</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(last_element!=in_stac[i])</span><br><span class="line">        i++;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left_in_stac</span><span class="params">(in_stac.begin(), in_stac.begin()+i)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">right_in_stac</span><span class="params">(in_stac.begin() + i + <span class="number">1</span>, in_stac.end())</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left_out_stac</span><span class="params">(out_stac.begin(), out_stac.begin() + i)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">right_out_stac</span><span class="params">(out_stac.begin() + i, out_stac.end() - <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span>; a &lt; left_in_stac.<span class="built_in">size</span>();a++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(left_in_stac.<span class="built_in">begin</span>(),left_in_stac.<span class="built_in">end</span>(),out_stac[a])==left_in_stac.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">is_legal</span>(left_in_stac, left_out_stac, <span class="number">0</span>, left_in_stac.<span class="built_in">size</span>() - <span class="number">1</span>) &amp;&amp; <span class="built_in">is_legal</span>(right_in_stac, right_out_stac, <span class="number">0</span>, right_out_stac.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; in_stac;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; out_stac;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        cin &gt;&gt; temp;</span><br><span class="line">        in_stac.<span class="built_in">push_back</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        cin &gt;&gt; temp;</span><br><span class="line">        out_stac.<span class="built_in">push_back</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">is_legal</span>(in_stac, out_stac, <span class="number">0</span>, in_stac.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>给定一个入栈序列，序列长度为N，请给出种出栈序列</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cur, vector&lt;<span class="type">int</span>&gt;&amp;arr, stack&lt;<span class="type">int</span>&gt;&amp;st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==arr.<span class="built_in">size</span>()&amp;&amp;st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cur &lt; arr.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 选择1: 将当前元素压入栈中</span></span><br><span class="line">        st.<span class="built_in">push</span>(arr[cur]);</span><br><span class="line">        <span class="built_in">dfs</span>(cur + <span class="number">1</span>, arr, st);</span><br><span class="line">        st.<span class="built_in">pop</span>(); <span class="comment">// 撤销选择1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 选择2: 将栈顶元素出栈并加入路径</span></span><br><span class="line">        path.<span class="built_in">push_back</span>(st.<span class="built_in">top</span>());</span><br><span class="line">        <span class="type">int</span> temp = st.<span class="built_in">top</span>(); <span class="comment">// 保存当前栈顶元素</span></span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">dfs</span>(cur, arr, st); <span class="comment">// 不增加 cur，继续从当前元素出发</span></span><br><span class="line">        st.<span class="built_in">push</span>(temp);     <span class="comment">// 恢复栈顶元素</span></span><br><span class="line">        path.<span class="built_in">pop_back</span>();   <span class="comment">// 撤销选择2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        cin &gt;&gt; temp;</span><br><span class="line">        arr.<span class="built_in">push_back</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, arr,st);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; result.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; result[i].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">            cout &lt;&lt; result[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>给定一个入栈序列，序列长度为N，请计算有多少种出栈序列</li></ul><img src="/2024/09/20/algorithm/Screenshot_2024-07-28-16-22-16-837_com.orion.notein-1724411809475-76-1724414108617-26.png" class="" title="Screenshot_2024-07-28-16-22-16-837_com.orion.notein"><p>$$<br>f(N)&#x3D;\sum_{x&#x3D;0}^{n-1}f(x)\times f(N-1-x)&#x3D;\frac{1}{N+1}\times f_{2N}^{N}&#x3D;f_{2N}^{N}-f_{2N}^{N-1}<br>$$</p><p>最后一步涉及离散数学的知识</p><ul><li>为什么栈不允许“读取内部元素”，只能在栈顶操作？</li></ul><img src="/2024/09/20/algorithm/image-20240728162408449-1724411809475-77-1724414108617-28.png" class="" title="image-20240728162408449"><p>栈是一种遵循“后进先出”（LIFO, Last In, First Out）原则的数据结构。它的设计目的是在数据管理过程中提供一种简单而有效的访问方式。这种设计背后的原因有几个关键点：</p><ol><li><p><strong>数据访问的简化</strong>：栈的结构使得数据的访问和管理变得非常简单和高效。由于只能从栈顶操作（即入栈和出栈），不需要考虑栈中其他元素的状态，这减少了复杂性和潜在的错误。</p></li><li><p><strong>数据完整性的保证</strong>：栈的访问限制有助于保护数据的完整性。在一些应用场景中，特别是程序的函数调用过程中，栈用于管理局部变量和函数调用的返回地址。只能通过栈顶访问，防止其他函数或进程意外修改栈中间的数据，从而保障数据的安全性和一致性。</p></li><li><p><strong>栈的典型应用</strong>：栈在许多计算机科学和编程领域有着广泛的应用。例如，程序的递归调用栈、表达式的解析和计算、浏览器的前进后退功能等。它们都依赖于栈的LIFO特性。允许随意访问栈中的元素可能会破坏这些应用的逻辑结构。</p></li><li><p><strong>效率问题</strong>：如果允许在栈中随机访问元素，会导致数据结构的复杂度增加，同时降低操作的效率。栈的操作（入栈、出栈、查看栈顶元素）通常都是 O(1) 时间复杂度，而增加随机访问功能可能会带来更高的时间复杂度。</p></li></ol><p>综上所述，栈的设计初衷和应用场景决定了它只允许在栈顶进行操作。这样不仅简化了数据管理，也保护了数据的完整性，并且提高了操作的效率。</p><h2 id="栈的实现方式"><a href="#栈的实现方式" class="headerlink" title="栈的实现方式"></a>栈的实现方式</h2><ul><li><p>顺序栈（Array-base Stack）</p><ul><li>使用向量实现，本质上是顺序表的简化版<ul><li>栈的大小</li></ul></li><li>关键是确定&#x3D;&#x3D;哪一端&#x3D;&#x3D;作为栈顶</li><li>上溢、下溢</li></ul></li><li><p>链式栈(Linked Stack)</p><ul><li>用单链表方式存储，其中指针的方向是从栈顶向下链接</li></ul></li></ul><p>&#x3D;&#x3D;顺序栈的类定义&#x3D;&#x3D;</p><ul><li>上溢(Overflow)<ul><li>当栈中已经有maxsize个元素时，如果再做进栈运算，所产生的现象</li></ul></li><li>下溢(Underflow)<ul><li>对空栈进行出栈运算时所产生的现象</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="keyword">class</span> <span class="title class_">arrStack</span>:<span class="keyword">public</span> Stack&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span>:<span class="comment">//栈的顺序存储</span></span><br><span class="line">    <span class="type">int</span> maSize;<span class="comment">//栈中最多存放的元素个数</span></span><br><span class="line">    <span class="type">int</span> top;<span class="comment">//栈顶位置，应小于mSize</span></span><br><span class="line">    T *st;<span class="comment">//存放栈元素的数组</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">arrStack</span>(<span class="type">int</span> size)&#123;</span><br><span class="line">            mSize=size;top=<span class="number">-1</span>;st=<span class="keyword">new</span> T[mSize];</span><br><span class="line">        &#125;</span><br><span class="line">    ~<span class="built_in">arrStack</span>()&#123;<span class="keyword">delete</span> []st;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;top=<span class="number">-1</span>;&#125;<span class="comment">//清空栈</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> arrStack&lt;T&gt;::<span class="built_in">push</span>(<span class="type">const</span> T item)&#123;</span><br><span class="line">    <span class="keyword">if</span>(top==mSize<span class="number">-1</span>)&#123;<span class="comment">//栈已满</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        st[++top]=item;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> arrStack&lt;T&gt;::<span class="built_in">pop</span>(T &amp;item)&#123;</span><br><span class="line">    <span class="keyword">if</span>(top==<span class="number">-1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈为空，不能进行出栈操作&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        item=st[top--];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">top</span><span class="params">(T &amp; item)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top==<span class="number">-1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈为空，不能读取栈顶元素&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        item=st[top];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;链式栈的创建&#x3D;&#x3D;</p><ul><li>用单链表方式存储</li><li>指针方向从&#x3D;&#x3D;栈顶向下&#x3D;&#x3D;连接</li></ul><p>如图：</p><img src="/2024/09/20/algorithm/image-20240728194932531-1724411809475-78-1724414108617-27.png" class="" title="image-20240728194932531"><p>数据成员&#x3D;&#x3D;top&#x3D;&#x3D;是一个指向链式栈的首节点（栈顶）的指针，链表的结点类型采用上一章的&#x3D;&#x3D;Link&#x3D;&#x3D;模版。进栈操作<code>push</code>在链表头插入元素，出栈操作<code>pop</code>删除链头元素并释放空间。显而易见，<code>push</code>和<code>pop</code>的时间代价为<code>O(1)</code></p><p>栈的链式实现</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lnkStack</span>:<span class="keyword">public</span> Stack&lt;T&gt;&#123;</span><br><span class="line">       <span class="keyword">private</span>:<span class="comment">//栈的链式存储</span></span><br><span class="line">       Link&lt;T&gt;* top;<span class="comment">//指向栈顶的指针</span></span><br><span class="line">       <span class="type">int</span> size;<span class="comment">//存放元素的个数</span></span><br><span class="line">       <span class="keyword">public</span>:<span class="comment">//栈运算的链式实现</span></span><br><span class="line">       <span class="built_in">lnkStack</span>(<span class="type">int</span> defSize)&#123;<span class="comment">//构造函数</span></span><br><span class="line">               top=<span class="literal">NULL</span>;</span><br><span class="line">               size=<span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       ~<span class="built_in">lnkStack</span>()&#123;</span><br><span class="line">               <span class="built_in">clear</span>();</span><br><span class="line">           &#125;</span><br><span class="line">       <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">               <span class="keyword">while</span>(top!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                   Link&lt;T&gt;*tmp=top;</span><br><span class="line">                   top=top-&gt;next;</span><br><span class="line">                   <span class="keyword">delete</span> tmp;</span><br><span class="line">               &#125;<span class="comment">//一步步清除节点</span></span><br><span class="line">               size=<span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       <span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T item)</span></span>&#123;<span class="comment">//入栈操作的顺序实现</span></span><br><span class="line">               Link&lt;T&gt;* tmp=<span class="keyword">new</span> <span class="built_in">Link</span>&lt;T&gt;(item,top);</span><br><span class="line">               top=tmp;</span><br><span class="line">               size++;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(T&amp; item)</span></span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(top==<span class="literal">nullptr</span>||size==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">               Link&lt;T&gt;* tmp=top;</span><br><span class="line">               top=top-&gt;next;</span><br><span class="line">               <span class="keyword">delete</span> tmp;</span><br><span class="line">               size--;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       <span class="function"><span class="type">bool</span> <span class="title">top</span><span class="params">(T &amp; item)</span></span>&#123;<span class="comment">//返回栈顶内容，但不弹出</span></span><br><span class="line">           <span class="keyword">if</span>(size==<span class="number">0</span>)&#123;</span><br><span class="line">                   cout&lt;&lt;<span class="string">&quot;栈为空，不能读取栈顶元素&quot;</span>&lt;&lt;endl;</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               item=top-&gt;data;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               </span><br><span class="line">           &#125;</span><br><span class="line">       </span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><h3 id="顺序栈和链式栈的比较"><a href="#顺序栈和链式栈的比较" class="headerlink" title="顺序栈和链式栈的比较"></a>顺序栈和链式栈的比较</h3><ul><li><p>时间效率</p><ul><li>所有操作都只需常数时间</li><li>顺序栈和链式栈在时间效率上难分伯仲</li></ul></li><li><p>空间效率</p><ul><li>顺序栈须说明一个固定的长度</li><li>链式栈的长度可变，但增加&#x3D;&#x3D;结构性开销&#x3D;&#x3D;（指的是指针）</li></ul></li><li><p>实际应用中，顺序栈比链式栈用得更广泛</p></li></ul><h3 id="栈与递归的关系是什么"><a href="#栈与递归的关系是什么" class="headerlink" title="栈与递归的关系是什么"></a>栈与递归的关系是什么</h3><blockquote><h4 id="栈与递归的关系"><a href="#栈与递归的关系" class="headerlink" title="栈与递归的关系"></a>栈与递归的关系</h4><p>栈（Stack）和递归（Recursion）在数据结构与算法中有着密切的关系。以下是它们之间关系的详细讨论，以及为什么递归调用是栈的一个典型应用范例。</p><h5 id="1-栈的基本概念"><a href="#1-栈的基本概念" class="headerlink" title="1. 栈的基本概念"></a>1. 栈的基本概念</h5><p>栈是一种后进先出（LIFO，Last In First Out）的数据结构。栈中的操作主要包括：</p><ul><li><strong>压栈（Push）</strong>：将元素添加到栈顶。</li><li><strong>弹栈（Pop）</strong>：从栈顶移除元素。</li><li><strong>查看栈顶元素（Peek）</strong>：获取栈顶元素但不移除它。</li></ul><h5 id="2-递归的基本概念"><a href="#2-递归的基本概念" class="headerlink" title="2. 递归的基本概念"></a>2. 递归的基本概念</h5><p>递归是一种在函数内部调用自身的编程技巧。一个递归函数通常包含两个部分：</p><ul><li><strong>基例（Base Case）</strong>：定义了递归终止的条件。</li><li><strong>递归部分（Recursive Case）</strong>：函数调用自身来解决更小的子问题。</li></ul><h5 id="3-递归与栈的关系"><a href="#3-递归与栈的关系" class="headerlink" title="3. 递归与栈的关系"></a>3. 递归与栈的关系</h5><p>每次函数调用，系统会在内存中为该函数分配一个栈帧（Stack Frame），其中包含了函数的局部变量、参数、返回地址等信息。当一个递归函数调用自身时，会生成新的栈帧并压入调用栈中，直到达到基例。递归调用的返回过程就是栈帧从调用栈中依次弹出的过程。</p><h6 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h6><ol><li><strong>递归调用阶段</strong>：</li></ol><ul><li>每次递归调用，当前函数的执行被挂起，当前状态被保存到栈中。</li><li>新的栈帧被创建并压入调用栈，处理递归调用的子问题。</li></ul><ol start="2"><li><strong>递归返回阶段</strong>：</li></ol><ul><li>当递归基例条件满足时，递归开始返回。</li><li>栈帧从调用栈中弹出，恢复到上一个函数的执行状态。</li></ul><h5 id="4-为什么递归是栈的一个应用范例？"><a href="#4-为什么递归是栈的一个应用范例？" class="headerlink" title="4. 为什么递归是栈的一个应用范例？"></a>4. 为什么递归是栈的一个应用范例？</h5><p>递归函数在执行时，系统自动使用调用栈来管理函数调用。每个函数调用都会导致一个新的栈帧被压入栈中，递归的深度越深，调用栈中的栈帧也越多。因此，递归算法的实现与栈的操作天然对应。通过理解递归调用栈的工作机制，可以更好地掌握递归算法的执行过程。</p><h5 id="5-示例代码"><a href="#5-示例代码" class="headerlink" title="5. 示例代码"></a>5. 示例代码</h5><p>下面是一个简单的递归函数和它的非递归（使用显式栈）实现，以求解阶乘为例：</p><h6 id="递归实现："><a href="#递归实现：" class="headerlink" title="递归实现："></a>递归实现：</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 基例</span></span><br><span class="line">   <span class="keyword">return</span> n * <span class="built_in">factorial</span>(n - <span class="number">1</span>); <span class="comment">// 递归调用</span></span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><h6 id="非递归实现（使用栈）："><a href="#非递归实现（使用栈）：" class="headerlink" title="非递归实现（使用栈）："></a>非递归实现（使用栈）：</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">   std::stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">   <span class="type">int</span> result = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">       s.<span class="built_in">push</span>(n);</span><br><span class="line">       n--;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">       result *= s.<span class="built_in">top</span>();</span><br><span class="line">       s.<span class="built_in">pop</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码可以看到，递归实现依赖于系统的调用栈，而非递归实现则通过显式的栈来管理递归过程。两者本质上是等价的，只是处理方式不同。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>递归和栈是密切相关的概念，递归调用天然地依赖于调用栈的管理。因此，递归是栈的一个经典应用范例，通过理解递归调用的栈机制，可以更好地掌握递归算法的执行过程。</p></blockquote><h1 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h1><h2 id="计算表达式求值"><a href="#计算表达式求值" class="headerlink" title="计算表达式求值"></a>计算表达式求值</h2><ul><li><p>表达式的递归定义</p><ul><li>基本符号集：{0,1，……,9,+,-,*,&#x2F;,(,)}</li><li>语法成分集：{&lt;表达式&gt;,&lt;项&gt;，&lt;因子&gt;,&lt;常数&gt;,&lt;数字&gt;}</li><li>语法公式集：语法公式又称为产生式规则，用于定义语法成分。为了简便，在不影响通用性的前提下，下面给出的表达式的语法公式进行了简化处理：<ul><li>&lt;表达式&gt;::&#x3D;&lt;项&gt;+&lt;项&gt;|&lt;项&gt;-&lt;项&gt;|&lt;项&gt;</li><li>&lt;项&gt;       ::&#x3D;&lt;因子&gt;*&lt;因子&gt;|&lt;因子&gt;&#x2F;&lt;因子&gt;|&lt;因子&gt;</li><li>&lt;因子&gt;   ::&#x3D;&lt;常数&gt;|(&lt;表达式&gt;)</li><li>&lt;常数&gt;   ::&#x3D;&lt;数字&gt;|&lt;数字&gt;&lt;常数&gt;</li><li>&lt;数字&gt;   ::&#x3D;0~9</li></ul></li></ul></li><li><p>中缀表达式：23+（34*45）&#x2F;（5+6+7）</p><ul><li><img src="/2024/09/20/algorithm/image-20240814111409063-1724411809475-79-1724414108617-29.png" class="" title="image-20240814111409063"></li></ul></li><li><p>后缀表达式：23 34 45 * 5 6 + 7 + &#x2F; +</p></li></ul><img src="/2024/09/20/algorithm/5c7f4b2c63241fe2042adaf77eef8e4-1724411809475-80-1724414108617-30.jpg" class="" title="5c7f4b2c63241fe2042adaf77eef8e4"><h3 id="中缀表达式到后缀表达式的转换"><a href="#中缀表达式到后缀表达式的转换" class="headerlink" title="中缀表达式到后缀表达式的转换"></a>中缀表达式到后缀表达式的转换</h3><p>&#x3D;&#x3D;将中缀表达式转换成等价的后缀表达式的关键在于如何恰当地去除中缀表达式的括号，然后再必要时按先乘除后加减的优先规则调换运算符的先后顺序，在去括号的过程中用栈来存储有关的元素&#x3D;&#x3D;</p><p><em>基本思路</em>：从左到右顺序扫描中缀表达式，用栈来存放表达式中的操作数，开括号以及在这个开括号后面的其他暂时不能确定计算次序的内容</p><p>中缀表达式以字符串InfixExp表示，转换后的后缀表达式用字符串PostfixExp来表示，则该转换算法的输入即为InfixExp，输出便为PostfixExp。</p><p>&#x3D;&#x3D;实现步骤&#x3D;&#x3D;：</p><ul><li><p>当输入的是操作数时，直接输出到后缀表达式PostfixExp序列中</p></li><li><p>当遇到开括号时，将其入栈</p></li><li><p>当输入遇到闭括号时，先判断栈是否为空，若为空，则出现异常情况，清栈退出。若非空，则把栈中的元素依次弹出，直到遇到第一个开括号为止，将弹出的元素输出到后缀序列。注意不要把括号放到后缀序列内</p></li><li><p>当输入为运算符时：</p><ul><li>循环，当&#x3D;&#x3D;栈非空&amp;&amp;栈顶不是开括号&amp;&amp;栈顶元素的优先级大于等于要输入运算符的优先级&#x3D;&#x3D;时，反复操作将栈顶元素弹出，放到后缀表达式序列</li><li>将输入的运算符压入栈中</li></ul></li><li><p>最后，扫描完毕时，若栈内仍有元素，则将其全部依次弹出，放在后缀表达式序列尾部</p></li></ul><p>&#x3D;&#x3D;代码实现（纯手敲,，累死版）&#x3D;&#x3D;</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare_the_levels_of_priorities</span><span class="params">(<span class="type">char</span> cur,<span class="type">char</span> stcur)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stcur==<span class="string">&#x27;+&#x27;</span>||stcur==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="string">&#x27;*&#x27;</span>||cur==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isNumber</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) || c == <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOperator</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span> || c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">transform</span><span class="params">(string InfixExp)</span></span>&#123;</span><br><span class="line">    string PostfixExp;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">    string num;</span><br><span class="line">    <span class="type">char</span> cur;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; InfixExp.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cur = InfixExp[i];</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(cur))&#123;</span><br><span class="line">            num.<span class="built_in">push_back</span>(cur);</span><br><span class="line">            <span class="keyword">if</span> (i == InfixExp.<span class="built_in">size</span>() - <span class="number">1</span> || !<span class="built_in">isNumber</span>(InfixExp[i + <span class="number">1</span>]))</span><br><span class="line">            &#123;</span><br><span class="line">                PostfixExp.<span class="built_in">append</span>(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                num.<span class="built_in">clear</span>();</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cur==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">            st.<span class="built_in">push</span>(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cur==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;输入有问题&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">char</span> stcur = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">while</span>(stcur!=<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                    PostfixExp.<span class="built_in">push_back</span>(stcur);</span><br><span class="line">                    PostfixExp.<span class="built_in">push_back</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                    stcur = st.<span class="built_in">top</span>();</span><br><span class="line">                    st.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isOperator</span>(cur))&#123;</span><br><span class="line">            </span><br><span class="line">                <span class="keyword">while</span> (!st.<span class="built_in">empty</span>() &amp;&amp; st.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span> &amp;&amp; <span class="built_in">compare_the_levels_of_priorities</span>(cur, st.<span class="built_in">top</span>()))&#123;</span><br><span class="line">                    PostfixExp.<span class="built_in">push_back</span>(st.<span class="built_in">top</span>());</span><br><span class="line">                    PostfixExp.<span class="built_in">push_back</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                    st.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">push</span>(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        PostfixExp.<span class="built_in">push_back</span>(st.<span class="built_in">top</span>());</span><br><span class="line">        PostfixExp.<span class="built_in">push_back</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> PostfixExp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string InfixExp;</span><br><span class="line">    cin &gt;&gt; InfixExp;</span><br><span class="line">    string PostfixExp = <span class="built_in">transform</span>(InfixExp);</span><br><span class="line">    cout &lt;&lt; PostfixExp;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后缀表达式求值"><a href="#后缀表达式求值" class="headerlink" title="后缀表达式求值"></a>后缀表达式求值</h3><p>计算过程：</p><ul><li>如果遇到一个操作数，则压入栈中。</li><li>如果遇到一个运算符，就从栈中弹出两个操作数，按照运算符对这两个操作数进行相应的运算，然后将计算结果压入栈中。</li></ul><p>如此继续，直到遇到符号“&#x3D;”，此时栈顶的值就是输入表达式的值。例如，后缀表达式</p><p> 23 34 45 * 5 6 + 7 + &#x2F; +</p><img src="/2024/09/20/algorithm/image-20240814224919876-1724411809475-81-1724414108617-31.png" class="" title="image-20240814224919876"><p>&#x3D;&#x3D;代码（纯手敲）&#x3D;&#x3D;</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isNumber</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) || c == <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOperator</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span> || c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator_result</span><span class="params">(string PostfixExp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string num;</span><br><span class="line"></span><br><span class="line">    stack&lt;<span class="type">double</span>&gt; st;</span><br><span class="line">    <span class="type">char</span> cur;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PostfixExp.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cur = PostfixExp[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isNumber</span>(cur))</span><br><span class="line">        &#123;</span><br><span class="line">            num.<span class="built_in">push_back</span>(cur);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i == PostfixExp.<span class="built_in">size</span>() - <span class="number">1</span> || !<span class="built_in">isNumber</span>(PostfixExp[i + <span class="number">1</span>]))</span><br><span class="line">            &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(<span class="built_in">stod</span>(num));              </span><br><span class="line">                num.<span class="built_in">clear</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isOperator</span>(cur))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> result = <span class="number">0</span>;</span><br><span class="line">            <span class="type">double</span> num1 = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">double</span> num2 = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">switch</span> (cur)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                result = num1 + num2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                result = num2 - num1;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                result = num1 * num2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                result = num2 / num1;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            st.<span class="built_in">push</span>(result);</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> st.<span class="built_in">top</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string PostfixExp;</span><br><span class="line">    <span class="built_in">getline</span>(cin,PostfixExp);</span><br><span class="line"> </span><br><span class="line">    cout &lt;&lt; <span class="built_in">operator_result</span>(PostfixExp) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;抽象类实现&#x3D;&#x3D;</p><h1 id="栈与递归"><a href="#栈与递归" class="headerlink" title="栈与递归"></a>栈与递归</h1><h2 id="递归定义"><a href="#递归定义" class="headerlink" title="递归定义"></a>递归定义</h2><p>一个递归由两部分组成：其一为&#x3D;&#x3D;递归基础&#x3D;&#x3D;，也称递归出口，是递归定义的最基本情况，其二为&#x3D;&#x3D;递归规则&#x3D;&#x3D;，确定了由简单情况构筑复杂情况需要构筑复杂情况需遵循的规则。</p><h2 id="递归函数的实现"><a href="#递归函数的实现" class="headerlink" title="递归函数的实现"></a>递归函数的实现</h2><p>大多数程序设计语言运行环境所提供的函数调用机制是底层的编译栈支持的。编译栈中的“运行时环境”指的是目标计算机上用来管理存储器并保存执行过程所需信息的寄存器及存储器的结构。</p><p>&#x3D;&#x3D;静态分配&#x3D;&#x3D;：在非递归调用下，数据区的分配可以在程序运行前进行，直到整个程序运行结束再释放。</p><p>&#x3D;&#x3D;递归调用&#x3D;&#x3D;：被调函数的局部变量不能静态分配到某些固定单元，而必须每调用一次就分配一次，以存放当前所使用的数据，当返回时随机释放。这种只有在执行调用时才能进行的存储分配成为“动态分配”，此时需要在内存中开辟一个称为&#x3D;&#x3D;运行栈&#x3D;&#x3D;的足够大的动态区。</p><h3 id="递归函数的执行"><a href="#递归函数的执行" class="headerlink" title="递归函数的执行"></a>递归函数的执行</h3><p>递归函数在每次调用时会生成一个新的函数实例并压入栈中。栈保存了函数的参数和局部变量。执行过程如下：</p><ul><li>调用递归函数。</li><li>将当前状态压栈。</li><li>函数进行下一步递归调用。</li><li>当到达基准条件时，递归停止。</li><li>逐层从栈中弹出函数实例，恢复之前的执行状态，直至最外层的函数返回结果。</li></ul><p>&#x3D;&#x3D;对函数调用栈的解释&#x3D;&#x3D;</p><blockquote><p>函数调用栈（Call Stack）是程序执行过程中管理函数调用与返回的关键机制。它的作用是追踪当前正在执行的函数以及这些函数的调用者，确保函数在执行完毕后能够正确返回调用它的地方。</p><h3 id="函数调用栈的基本原理"><a href="#函数调用栈的基本原理" class="headerlink" title="函数调用栈的基本原理"></a>函数调用栈的基本原理</h3><ol><li><strong>栈的结构</strong>：</li></ol><ul><li>调用栈是一种后进先出的数据结构（LIFO），即最后压入栈的数据最先弹出。函数调用栈用于保存当前函数执行的环境信息（如局部变量、参数、返回地址等）。</li><li>每当一个函数被调用时，都会在调用栈中创建一个新的栈帧（Stack Frame），栈帧存储该函数的执行状态。</li></ul><ol start="2"><li><strong>栈帧（Stack Frame）</strong>：<br> 栈帧是调用栈中每个函数调用的记录，包含以下信息：</li></ol><ul><li><strong>返回地址</strong>：函数执行完毕后需要返回的地址。</li><li><strong>函数参数</strong>：当前调用传递的参数。</li><li><strong>局部变量</strong>：函数内定义的局部变量。</li><li><strong>保存的寄存器</strong>：CPU寄存器状态，以便函数返回时能够恢复。</li></ul><p>  当函数返回时，该栈帧会从调用栈中弹出，并将控制权返回给调用者。</p><h3 id="函数调用栈的执行过程"><a href="#函数调用栈的执行过程" class="headerlink" title="函数调用栈的执行过程"></a>函数调用栈的执行过程</h3><p>假设有两个函数 <code>A</code> 和 <code>B</code>，且 <code>A</code> 调用了 <code>B</code>，则函数调用栈的执行过程如下：</p><ol><li><strong>进入函数 A</strong>：</li></ol><ul><li>函数 <code>A</code> 被调用时，栈中为 <code>A</code> 创建栈帧。</li><li>栈帧保存了 <code>A</code> 的局部变量、函数参数以及返回地址（即<code>A</code>完成执行后应该返回的位置）。</li></ul><ol start="2"><li><strong>函数 A 调用函数 B</strong>：</li></ol><ul><li>当 <code>A</code> 调用 <code>B</code> 时，栈中为 <code>B</code> 创建新的栈帧。</li><li><code>B</code> 的栈帧保存了 <code>B</code> 的参数、局部变量以及返回到 <code>A</code> 的地址。</li><li><code>A</code> 的栈帧依然保持在栈中，等待 <code>B</code> 执行完毕后恢复。</li></ul><ol start="3"><li><strong>执行函数 B</strong>：</li></ol><ul><li>在函数 <code>B</code> 的栈帧中，程序执行 <code>B</code> 的指令。</li><li>函数 <code>B</code> 完成后，其返回地址将指向调用它的函数 <code>A</code>，并从调用栈中弹出 <code>B</code> 的栈帧。</li></ul><ol start="4"><li><strong>返回到函数 A</strong>：</li></ol><ul><li>程序跳回 <code>A</code> 函数的返回地址。</li><li><code>A</code> 的栈帧被恢复，执行继续。</li></ul><ol start="5"><li><strong>退出函数 A</strong>：</li></ol><ul><li>当 <code>A</code> 完成执行后，其栈帧从调用栈中弹出。</li><li>控制权返回到最初调用 <code>A</code> 的位置。</li></ul><h3 id="函数调用栈的优点"><a href="#函数调用栈的优点" class="headerlink" title="函数调用栈的优点"></a>函数调用栈的优点</h3><ul><li><strong>管理函数调用</strong>：调用栈自动管理函数调用的顺序，确保函数在调用后能够正确返回到调用点。</li><li><strong>支持递归调用</strong>：递归调用时，每次递归调用都会创建新的栈帧，栈帧中保存各自的局部状态，保证了每次递归调用的独立性。</li></ul><h3 id="函数调用栈的限制"><a href="#函数调用栈的限制" class="headerlink" title="函数调用栈的限制"></a>函数调用栈的限制</h3><ol><li><strong>栈空间有限</strong>：调用栈的空间是有限的，通常由操作系统分配固定大小的内存。当递归深度过大或函数嵌套过深时，可能导致栈空间耗尽，发生栈溢出错误（Stack Overflow）。</li><li><strong>调用开销</strong>：每次函数调用都伴随着栈帧的创建和销毁，这会引入一些额外的开销，尤其是在递归调用较多时，性能可能受影响。</li></ol><h3 id="递归函数的开销"><a href="#递归函数的开销" class="headerlink" title="递归函数的开销"></a>递归函数的开销</h3><ul><li>每次函数调用需要创建栈帧</li><li>空间开销</li><li>实际中的栈帧可能很大（包含其它信息）</li><li>可能导致栈溢出，造成安全漏洞</li><li>时间开销</li><li>栈操作</li><li>函数调用指令</li></ul><h3 id="递归与调用栈"><a href="#递归与调用栈" class="headerlink" title="递归与调用栈"></a>递归与调用栈</h3><p>在递归调用中，每个递归调用都会在栈中生成一个新的栈帧，直到达到基准条件开始返回。递归的结束会按调用顺序逐层从栈中弹出函数实例。由于递归会占用较多的栈空间，如果递归深度过大，容易导致栈溢出。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>函数调用栈是确保函数调用正确进行、状态恢复的重要机制。它自动管理函数的调用与返回、局部变量和参数的保存与恢复。但在处理递归时，需要注意栈的深度以避免溢出。</p></blockquote><p>&#x3D;&#x3D;绘图解释：&#x3D;&#x3D;</p><p>​<img src="/2024/09/20/algorithm/image-20240821083958353-1724411809475-82-1724414108617-32.png" class="" title="image-20240821083958353"></p><img src="/2024/09/20/algorithm/image-20240821084014027-1724411809475-83-1724414108617-33.png" class="" title="image-20240821084014027"><img src="/2024/09/20/algorithm/image-20240821084036419-1724411809475-84-1724414108617-34.png" class="" title="image-20240821084036419"><img src="/2024/09/20/algorithm/image-20240821084047094-1724411809475-85-1724414108617-35.png" class="" title="image-20240821084047094"><img src="/2024/09/20/algorithm/image-20240821084059931-1724411809476-86-1724414108617-36.png" class="" title="image-20240821084059931"><img src="/2024/09/20/algorithm/image-20240821084109296-1724411809476-87-1724414108617-37.png" class="" title="image-20240821084109296"><img src="/2024/09/20/algorithm/image-20240821084118290-1724411809476-88-1724414108617-38.png" class="" title="image-20240821084118290"><img src="/2024/09/20/algorithm/image-20240821084127336-1724411809476-89-1724414108617-39.png" class="" title="image-20240821084127336"><img src="/2024/09/20/algorithm/image-20240821084139984-1724411809476-90-1724414108617-40.png" class="" title="image-20240821084139984"><h2 id="递归转为非递归"><a href="#递归转为非递归" class="headerlink" title="递归转为非递归"></a>递归转为非递归</h2><ul><li>递归函数转非递归：减少开销</li></ul><h3 id="递归函数转非递归：尾递归"><a href="#递归函数转非递归：尾递归" class="headerlink" title="递归函数转非递归：尾递归"></a>递归函数转非递归：尾递归</h3><ul><li>一类特殊的递归函数：尾递归</li><li>尾递归：函数&#x3D;&#x3D;仅有一次&#x3D;&#x3D;自身调用，且该调用是函数退出前的&#x3D;&#x3D;最后一个&#x3D;&#x3D;操作</li></ul><p>&#x3D;&#x3D;尾递归的解释&#x3D;&#x3D;</p><blockquote><p>尾递归其实也是调用自身的一种方式，但它的特殊性在于函数的递归调用发生在<strong>函数的最后一步</strong>，而没有任何额外的计算或操作在递归调用之后。因此，尾递归可以被优化为<strong>迭代</strong>，从而不再需要维护多个栈帧。</p><h3 id="尾递归的定义"><a href="#尾递归的定义" class="headerlink" title="尾递归的定义"></a>尾递归的定义</h3><p><strong>尾递归</strong>指的是函数在返回结果之前唯一的操作是调用自身，递归调用发生在函数的<strong>末尾</strong>，且递归调用的结果直接作为函数的返回值。</p><h3 id="尾递归与普通递归的区别"><a href="#尾递归与普通递归的区别" class="headerlink" title="尾递归与普通递归的区别"></a>尾递归与普通递归的区别</h3><ol><li><strong>普通递归</strong>：</li></ol><ul><li>普通递归的调用过程中，函数在调用自身后，通常会在返回结果之前进行一些额外的操作。</li><li>由于函数在递归调用后还有未完成的操作，每个递归调用都需要保留在栈中，直到所有递归调用完成，栈帧才能依次弹出。</li></ul><p>  例如，计算阶乘的普通递归：<br>  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * <span class="built_in">factorial</span>(n - <span class="number">1</span>);  <span class="comment">// 递归调用之后还有乘法运算</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="2"><li><strong>尾递归</strong>：</li></ol><ul><li>在尾递归中，函数调用自身的结果不再参与其他计算，而是直接返回。</li><li>因为递归调用是函数的最后一步，所以在许多编程语言和编译器中，可以进行优化，即复用当前的栈帧而不必创建新的栈帧。这样可以避免栈溢出。</li></ul><p>  尾递归形式的阶乘计算：<br>  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial_tail</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> acc = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">factorial_tail</span>(n - <span class="number">1</span>, n * acc);  <span class="comment">// 尾递归，递归调用直接返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="尾递归优化"><a href="#尾递归优化" class="headerlink" title="尾递归优化"></a>尾递归优化</h3><p>当编译器或解释器检测到尾递归时，它会进行<strong>尾调用优化</strong>（Tail Call Optimization, TCO）。在这种情况下，当前栈帧不会在递归调用后保留，而是直接复用栈帧。这使得尾递归可以像循环一样有效运行，不会因为递归深度过大而耗尽栈空间。</p><p>因此，<strong>尾递归</strong>虽然也是调用自身，但由于它的优化特性，可以在不增加栈空间的情况下高效运行，类似于迭代。</p><h3 id="为什么尾递归有时不被称为”调用自身”"><a href="#为什么尾递归有时不被称为”调用自身”" class="headerlink" title="为什么尾递归有时不被称为”调用自身”"></a>为什么尾递归有时不被称为”调用自身”</h3><p>尽管尾递归本质上仍然是调用自身，部分编程社区或文档中不将其单独称为“调用自身”，主要是因为尾递归的实现方式和普通递归有较大区别：</p><ul><li>普通递归：每次调用自身都会增加栈帧，栈帧保存了递归的上下文信息。</li><li>尾递归：由于尾调用优化的存在，递归调用并不会增加新的栈帧，因此其表现更像循环。</li></ul><p>因此，在一些编程语言中，尾递归不再被视为传统意义上的递归，而更接近于一种高效的循环调用。</p></blockquote><ul><li><p>尾递归可以很容易转化成非递归形式</p><ul><li>尾递归的本质：将单词计算的结果缓存起来，传递给下次调用，相当于自动累积</li><li>转化非递归：通过循环迭代，每次保存累计结果</li></ul></li><li><p>转化之后：没有栈开销，没有函数调用开销</p><ul><li>递归调用：线性空间</li><li>非递归循环：常数空间</li></ul><blockquote><p>当递归转换为尾递归时，经过<strong>尾调用优化（Tail Call Optimization, TCO）</strong>，可以避免函数调用的开销。这是因为尾递归允许编译器或解释器通过优化机制来减少函数调用的成本，具体过程如下：</p><h3 id="函数调用的开销"><a href="#函数调用的开销" class="headerlink" title="函数调用的开销"></a>函数调用的开销</h3><p>在普通递归中，每次递归调用都会涉及到以下几个步骤，这些步骤引入了额外的开销：</p><ol><li><strong>保存当前函数的状态</strong>：包括函数的局部变量、参数、返回地址等，保存在栈帧中。</li><li><strong>创建新的栈帧</strong>：为递归调用创建新的函数执行环境，并将其压入调用栈。</li><li><strong>恢复执行状态</strong>：当递归返回时，依次从栈中弹出栈帧，恢复上一个调用的执行状态，继续进行剩余操作。</li></ol><p>这些操作消耗了CPU资源并占用了内存的栈空间。对于深度递归，开销会随着递归深度的增加而迅速累积，甚至可能导致<strong>栈溢出</strong>。</p><h3 id="尾递归与尾调用优化的原理"><a href="#尾递归与尾调用优化的原理" class="headerlink" title="尾递归与尾调用优化的原理"></a>尾递归与尾调用优化的原理</h3><p>尾递归中的递归调用发生在函数的最后一步，意味着在递归调用之后，函数无需进行任何额外操作。这使得编译器可以优化递归调用，省略不必要的栈帧。具体优化步骤如下：</p><ol><li><p><strong>不保存当前栈帧</strong>：由于递归调用是函数的最后一步，不再需要保留当前函数的执行上下文。因此，编译器可以直接复用当前栈帧，而不是创建新的栈帧。</p></li><li><p><strong>复用栈帧</strong>：在尾递归优化中，递归调用的栈帧会替代当前的栈帧。这意味着每次递归调用不会增加新的栈帧，从而减少了栈空间的使用。</p></li><li><p><strong>无堆栈增长</strong>：由于栈帧不会累积，递归调用的开销大大降低。尾递归优化的表现更像一个循环，随着每次递归调用，栈帧保持恒定大小，不会像普通递归那样逐步增加。</p></li></ol><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>考虑以下尾递归函数：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="type">int</span> <span class="title">factorial_tail</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> acc = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> acc;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">factorial_tail</span>(n - <span class="number">1</span>, n * acc);  <span class="comment">// 尾递归</span></span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>对于编译器来说，这个函数在调用 <code>factorial_tail</code> 时无需创建新的栈帧，因为它的唯一操作是直接返回递归调用的结果。因此，编译器可以直接复用当前的栈帧，省去函数调用的开销。</p><h3 id="为什么尾递归没有函数调用开销？"><a href="#为什么尾递归没有函数调用开销？" class="headerlink" title="为什么尾递归没有函数调用开销？"></a>为什么尾递归没有函数调用开销？</h3><p>由于编译器或解释器的尾调用优化，尾递归调用中的栈帧不会堆积，递归调用过程中的上下文切换、栈帧管理等操作也被简化。所有的递归调用都在同一个栈帧中完成，因此：</p><ul><li><strong>没有额外的栈空间消耗</strong>：栈帧不再堆积，递归深度不会影响内存使用。</li><li><strong>没有额外的函数调用开销</strong>：每次递归调用仅仅复用了当前栈帧，而不是创建新的栈帧。</li></ul><h3 id="尾递归优化的前提"><a href="#尾递归优化的前提" class="headerlink" title="尾递归优化的前提"></a>尾递归优化的前提</h3><p>需要注意的是，尾递归优化并非所有语言或编译器都支持。对于不支持尾递归优化的环境，即使函数满足尾递归条件，依然会产生函数调用开销。</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>尾递归之所以可以没有函数调用开销，是因为通过尾调用优化，递归调用可以在同一栈帧中完成，从而消除了创建和管理额外栈帧的需要。这使得尾递归在执行效率上类似于循环，没有普通递归那样的栈空间和函数调用开销。</p></blockquote></li></ul><h4 id="通用的递归到非递归的转化"><a href="#通用的递归到非递归的转化" class="headerlink" title="通用的递归到非递归的转化"></a>通用的递归到非递归的转化</h4><ul><li>思想：通过显式模拟函数调用过程<ul><li>特别是模拟调用栈的操作</li></ul></li><li>好处：适用于&#x3D;&#x3D;所有&#x3D;&#x3D;递归函数（机械转换）<ul><li>空间：减少冗余存储</li><li>时间：减少冗余操作（特别是函数跳转）</li></ul></li></ul><p>&#x3D;&#x3D;例子&#x3D;&#x3D;：</p><p>递归版本：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">fact</span><span class="params">(<span class="type">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> n*<span class="built_in">fact</span>(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非递归版本：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">fact_nr</span><span class="params">(<span class="type">long</span> n)</span></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">long</span>&gt;s;</span><br><span class="line">    <span class="type">long</span> ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">        s.<span class="built_in">push</span>(n--);</span><br><span class="line">    <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">long</span> top=s.<span class="built_in">top</span>();</span><br><span class="line">        ret*=top;</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题实例"><a href="#问题实例" class="headerlink" title="问题实例"></a>问题实例</h4><ul><li>[简化的0-1背包问题]</li></ul><p>​我们有n件物品，物品i的重量为<code>w[i]</code>。如果限定每种物品：要么完全放进背包，要么不放进背包，即物品是不可分割的。</p><p>​问：能否从这n件物品中选择若干件放入背包，使其重量之和恰好为s</p><p>&#x3D;&#x3D;动态规划（题外话）&#x3D;&#x3D;</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; stuff;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        cin &gt;&gt; h;</span><br><span class="line">        stuff.<span class="built_in">push_back</span>(h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(s<span class="number">+1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = s; j &gt;= stuff[i];j--)&#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - stuff[i]] + stuff[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ((dp[s] == s) ? <span class="string">&quot;true&quot;</span>:<span class="string">&quot;false&quot;</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;递归&#x3D;&#x3D;</p><p>递归关系：</p><p>​</p><ul><li><p><code>knap(s,n)=</code></p><ul><li><code>true</code>  if s&#x3D;0</li><li><code>false</code> if s&lt;0 or (s&gt;0 and n&lt;1)</li><li>$$knap(s-w_{n-1},n-1)or  knap(s,n-1)$$</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">knap</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> n,vector&lt;<span class="type">int</span>&gt; w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(s&lt;<span class="number">0</span>||(s&gt;<span class="number">0</span>&amp;&amp;n&lt;<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">knap</span>(s-w[n<span class="number">-1</span>],n<span class="number">-1</span>,w))&#123;</span><br><span class="line">        cout &lt;&lt; w[n - <span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">bool</span> tmp = <span class="built_in">knap</span>(s, n - <span class="number">1</span>,w);</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        cin &gt;&gt; h;</span><br><span class="line">        w.<span class="built_in">push_back</span>(h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">knap</span>(s, n,w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&#x3D;&#x3D;递归转换为非递归&#x3D;&#x3D;</p><p>原递归式子</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">knap</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((s&lt;<span class="number">0</span>)||(s&gt;<span class="number">0</span>&amp;&amp;n&lt;<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">knap</span>(s-w[n<span class="number">-1</span>],n<span class="number">-1</span>))&#123;</span><br><span class="line">        cout&lt;&lt;w[n<span class="number">-1</span>]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">bool</span> tmp=<span class="built_in">knap</span>(s,n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>步骤一：定义调用栈帧</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Elem</span>&#123;</span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> rd;</span><br><span class="line">    <span class="built_in">Elem</span>(<span class="type">int</span> s,<span class="type">int</span> n,<span class="type">int</span> rd):<span class="built_in">s</span>(s),<span class="built_in">n</span>(n),<span class="built_in">rd</span>(rd)&#123;&#125;</span><br><span class="line">   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>步骤二:将原问题压入栈</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">knap</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    stack&lt;Elem&gt;st;<span class="comment">//创建栈</span></span><br><span class="line">    <span class="function">Elem <span class="title">x</span><span class="params">(s,n,<span class="number">0</span>)</span></span>;<span class="comment">//原问题栈帧</span></span><br><span class="line">    st.<span class="built_in">push</span>(x);<span class="comment">//入栈</span></span><br><span class="line">    <span class="type">bool</span> ret;<span class="comment">//最近一次调用结果</span></span><br><span class="line">    <span class="comment">//more</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>步骤三：程序分析</p><img src="/2024/09/20/algorithm/image-20240821105012251-1724411809476-91-1724414108617-41.png" class="" title="image-20240821105012251"></li></ul><img src="/2024/09/20/algorithm/image-20240821105520771-1724411809476-92-1724414108617-42.png" class="" title="image-20240821105520771"><ul><li><p>步骤四：划分标签、翻译</p><img src="/2024/09/20/algorithm/image-20240821110438284-1724411809476-93-1724414108617-43.png" class="" title="image-20240821110438284"></li></ul><img src="/2024/09/20/algorithm/image-20240821110458148-1724411809476-94-1724414108617-44.png" class="" title="image-20240821110458148"><img src="/2024/09/20/algorithm/image-20240821110508887-1724411809476-95-1724414108617-45.png" class="" title="image-20240821110508887"><img src="/2024/09/20/algorithm/image-20240821110519729-1724411809476-96-1724414108617-46.png" class="" title="image-20240821110519729"><img src="/2024/09/20/algorithm/image-20240821110531568-1724411809476-97-1724414108617-47.png" class="" title="image-20240821110531568"><p>小结：t次递归调用，添加t+2个标签</p><ul><li><p>步骤五：用<code>goto</code>实现递归调用</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">knap</span><span class="params">(<span class="type">int</span> s ,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    stack&lt;Elem&gt;st;</span><br><span class="line">    <span class="function">Elem <span class="title">x</span><span class="params">(s,n,<span class="number">0</span>)</span></span>;</span><br><span class="line">    st.<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="type">bool</span> ret;</span><br><span class="line">    L0:<span class="comment">//第一个标签</span></span><br><span class="line">s=st.<span class="built_in">top</span>().s;</span><br><span class="line">    n=st.<span class="built_in">top</span>().n;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="number">0</span>)&#123;</span><br><span class="line">        ret=<span class="literal">true</span>;</span><br><span class="line">        TODO <span class="keyword">return</span> ;<span class="comment">//递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((s&lt;<span class="number">0</span>)||(s&gt;<span class="number">0</span>&amp;&amp;n&lt;<span class="number">1</span>))&#123;</span><br><span class="line">        ret=<span class="literal">false</span>;</span><br><span class="line">        TODO <span class="keyword">return</span> ;<span class="comment">//递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一次递归调用</span></span><br><span class="line">    st.<span class="built_in">push</span>(<span class="built_in">Elem</span>(s-w[n<span class="number">-1</span>],n<span class="number">-1</span>,<span class="number">1</span>));<span class="keyword">goto</span> L0;</span><br><span class="line">    L1:<span class="comment">//第二个标签</span></span><br><span class="line">    s=st.<span class="built_in">top</span>().s;</span><br><span class="line">    n=st.<span class="built_in">top</span>().n;</span><br><span class="line">    <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">        cout&lt;&lt;w[n<span class="number">-1</span>]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        ret=<span class="literal">true</span>;</span><br><span class="line">        TODO <span class="keyword">return</span>;<span class="comment">//递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//第二次递归调用</span></span><br><span class="line">        st.<span class="built_in">push</span>(<span class="built_in">Elem</span>(s,n<span class="number">-1</span>,<span class="number">2</span>));<span class="keyword">goto</span> L0;</span><br><span class="line">         L2:<span class="comment">//第三个标签</span></span><br><span class="line">    TODO <span class="keyword">return</span> ;<span class="comment">//递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">   L3:TODO:<span class="comment">//递归退出，决定返回地址</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;小结&#x3D;&#x3D;：t次递归调用，添加t+2个标签</p></li><li><p>步骤六：处理<code>return</code>语句(所有<code>return</code> 都 <code>goto</code> 到最后一个标签)</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">knap</span><span class="params">(<span class="type">int</span> s ,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    stack&lt;Elem&gt;st;</span><br><span class="line">    <span class="function">Elem <span class="title">x</span><span class="params">(s,n,<span class="number">0</span>)</span></span>;</span><br><span class="line">    st.<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="type">bool</span> ret;</span><br><span class="line">    L0:<span class="comment">//第一个标签</span></span><br><span class="line">s=st.<span class="built_in">top</span>().s;</span><br><span class="line">    n=st.<span class="built_in">top</span>().n;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="number">0</span>)&#123;</span><br><span class="line">        ret=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">goto</span> L3 ;<span class="comment">//递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((s&lt;<span class="number">0</span>)||(s&gt;<span class="number">0</span>&amp;&amp;n&lt;<span class="number">1</span>))&#123;</span><br><span class="line">        ret=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">goto</span> L3 ;<span class="comment">//递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一次递归调用</span></span><br><span class="line">    st.<span class="built_in">push</span>(<span class="built_in">Elem</span>(s-w[n<span class="number">-1</span>],n<span class="number">-1</span>,<span class="number">1</span>));<span class="keyword">goto</span> L0;</span><br><span class="line">    L1:<span class="comment">//第二个标签</span></span><br><span class="line">    s=st.<span class="built_in">top</span>().s;</span><br><span class="line">    n=st.<span class="built_in">top</span>().n;</span><br><span class="line">    <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">        cout&lt;&lt;w[n<span class="number">-1</span>]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        ret=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">goto</span> L3;<span class="comment">//递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//第二次递归调用</span></span><br><span class="line">        st.<span class="built_in">push</span>(<span class="built_in">Elem</span>(s,n<span class="number">-1</span>,<span class="number">2</span>));<span class="keyword">goto</span> L0;</span><br><span class="line">         L2:<span class="comment">//第三个标签</span></span><br><span class="line">    <span class="keyword">goto</span> L3 ;<span class="comment">//递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">   L3:TODO:<span class="comment">//递归退出，决定返回地址</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>步骤七：实现递归退出</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">knap</span><span class="params">(<span class="type">int</span> s ,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    stack&lt;Elem&gt;st;</span><br><span class="line">    <span class="function">Elem <span class="title">x</span><span class="params">(s,n,<span class="number">0</span>)</span></span>;</span><br><span class="line">    st.<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="type">bool</span> ret;</span><br><span class="line">    L0:<span class="comment">//第一个标签</span></span><br><span class="line">s=st.<span class="built_in">top</span>().s;</span><br><span class="line">    n=st.<span class="built_in">top</span>().n;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="number">0</span>)&#123;</span><br><span class="line">        ret=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">goto</span> L3 ;<span class="comment">//递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((s&lt;<span class="number">0</span>)||(s&gt;<span class="number">0</span>&amp;&amp;n&lt;<span class="number">1</span>))&#123;</span><br><span class="line">        ret=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">goto</span> L3 ;<span class="comment">//递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一次递归调用</span></span><br><span class="line">    st.<span class="built_in">push</span>(<span class="built_in">Elem</span>(s-w[n<span class="number">-1</span>],n<span class="number">-1</span>,<span class="number">1</span>));<span class="keyword">goto</span> L0;</span><br><span class="line">    L1:<span class="comment">//第二个标签</span></span><br><span class="line">    s=st.<span class="built_in">top</span>().s;</span><br><span class="line">    n=st.<span class="built_in">top</span>().n;</span><br><span class="line">    <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">        cout&lt;&lt;w[n<span class="number">-1</span>]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        ret=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">goto</span> L3;<span class="comment">//递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//第二次递归调用</span></span><br><span class="line">        st.<span class="built_in">push</span>(<span class="built_in">Elem</span>(s,n<span class="number">-1</span>,<span class="number">2</span>));<span class="keyword">goto</span> L0;</span><br><span class="line">         L2:<span class="comment">//第三个标签</span></span><br><span class="line">    <span class="keyword">goto</span> L3 ;<span class="comment">//递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">   L3:</span><br><span class="line">    <span class="keyword">switch</span>((x=st.<span class="built_in">top</span>().rd))&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:st.<span class="built_in">pop</span>();<span class="keyword">return</span> ret;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:st.<span class="built_in">pop</span>();<span class="keyword">goto</span> L1;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:st.<span class="built_in">pop</span>();<span class="keyword">goto</span> L2;</span><br><span class="line">        <span class="keyword">default</span>:<span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="comment">//递归退出，决定返回地址</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="具体实例"><a href="#具体实例" class="headerlink" title="具体实例"></a>具体实例</h5><p>假设我们有3个物品，它们的重量分别为<code>w[0] = 10</code>, <code>w[1] = 20</code>, <code>w[2] = 30</code>。我们想确定是否能从这些物品中选择一些，使它们的总重量恰好为<code>s = 50</code>。</p><h5 id="递归程序的函数调用栈情况"><a href="#递归程序的函数调用栈情况" class="headerlink" title="递归程序的函数调用栈情况"></a>递归程序的函数调用栈情况</h5><ol><li><code>knap(50, 3)</code>：检查总重量为50，物品数量为3。</li><li><code>knap(40, 2)</code>：选择物品3（重量30），检查剩余重量为20，物品数量为2。</li><li><code>knap(20, 1)</code>：选择物品2（重量20），检查剩余重量为0，物品数量为1。</li><li><code>knap(0, 0)</code>：达到基本情况，返回true。</li><li>从<code>knap(20, 1)</code>返回true，因为它找到了一个解。</li><li><code>knap(40, 2)</code>打印物品3的重量（30），然后返回true。</li><li><code>knap(50, 3)</code>从<code>knap(40, 2)</code>返回true，表示找到了一个解。</li></ol><h5 id="函数调用栈示例"><a href="#函数调用栈示例" class="headerlink" title="函数调用栈示例"></a>函数调用栈示例</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">复制knap(50, 3)</span><br><span class="line">  -&gt; knap(40, 2) [物品3被选中]</span><br><span class="line">    -&gt; knap(20, 1) [物品2被选中]</span><br><span class="line">      -&gt; knap(0, 0) [基本情况]</span><br><span class="line">    返回true</span><br><span class="line">    打印物品3的重量</span><br><span class="line">  返回true</span><br><span class="line">返回true</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; w;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Elem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> rd;</span><br><span class="line">    <span class="built_in">Elem</span>(<span class="type">int</span> s, <span class="type">int</span> n, <span class="type">int</span> rd) : <span class="built_in">s</span>(s), <span class="built_in">n</span>(n), <span class="built_in">rd</span>(rd) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">knap</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    w.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">    w.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">    w.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">    stack&lt;Elem&gt; st;</span><br><span class="line">    <span class="function">Elem <span class="title">x</span><span class="params">(s, n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    st.<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="type">bool</span> ret;</span><br><span class="line">L0: <span class="comment">// 第一个标签</span></span><br><span class="line">    s = st.<span class="built_in">top</span>().s;</span><br><span class="line">    n = st.<span class="built_in">top</span>().n;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">goto</span> L3; <span class="comment">// 递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((s &lt; <span class="number">0</span>) || (s &gt; <span class="number">0</span> &amp;&amp; n &lt; <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        ret = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">goto</span> L3; <span class="comment">// 递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第一次递归调用</span></span><br><span class="line">    st.<span class="built_in">push</span>(<span class="built_in">Elem</span>(s - w[n - <span class="number">1</span>], n - <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">goto</span> L0;</span><br><span class="line">L1: <span class="comment">// 第二个标签</span></span><br><span class="line">    s = st.<span class="built_in">top</span>().s;</span><br><span class="line">    n = st.<span class="built_in">top</span>().n;</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; w[n - <span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ret = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">goto</span> L3; <span class="comment">// 递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 第二次递归调用</span></span><br><span class="line">        st.<span class="built_in">push</span>(<span class="built_in">Elem</span>(s, n - <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">goto</span> L0;</span><br><span class="line">    L2:          <span class="comment">// 第三个标签</span></span><br><span class="line">        <span class="keyword">goto</span> L3; <span class="comment">// 递归出口</span></span><br><span class="line">    &#125;</span><br><span class="line">L3:</span><br><span class="line">    <span class="keyword">switch</span> ((x = st.<span class="built_in">top</span>()).rd)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">goto</span> L1;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">goto</span> L2;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="comment">// 递归退出，决定返回地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">knap</span>(<span class="number">50</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><ul><li><p>步骤一：定义栈帧，建立调用栈</p></li><li><p>步骤二：在栈中压入原始问题的帧(rd&#x3D;0)</p></li><li><p>步骤三：根据递归调用数<code>t</code>，将程序<code>t+1</code>个区域（t+1个递归出口）</p></li><li><p>步骤四：创建<code>(t+2)</code>个标签，逐区域翻译（除<code>return</code>语句、递归调用）</p><ul><li><code>t+2</code>个标签为<code>t+1</code>个区域的边界</li></ul></li><li><p>步骤五：用<code>goto</code>实现递归调用</p><ul><li>形式”<code>push stack;goto label 0</code>“,第<code>i</code>个调用<code>rd=i</code></li></ul></li><li><p>步骤六：用<code>goto</code>实现<code>return</code>语句</p><ul><li>将所有”<code>return</code>“替换为“<code>goto label(t+1)</code>”</li></ul></li><li><p>步骤七：在标签<code>t+1</code>后添加递归出口</p><ul><li>使用”switch”语句，根据栈顶的<code>rd</code>值判断继续执行的标签</li></ul></li><li><p>可选：代码优化</p></li></ul><h4 id="思考题-1"><a href="#思考题-1" class="headerlink" title="思考题"></a>思考题</h4><ul><li>问题：将前面提到的阶乘函数使用机械步骤转化为非递归形式</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">fact</span><span class="params">(<span class="type">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//递归出口1</span></span><br><span class="line">    <span class="type">int</span> tmp1=<span class="built_in">fact</span>(n<span class="number">-1</span>);<span class="comment">//调用自身1次</span></span><br><span class="line">    <span class="type">int</span> tmp2=tmp1*n;</span><br><span class="line">    <span class="keyword">return</span> tmp2;<span class="comment">//递归出口2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈帧：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Elem</span>()&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> rd;</span><br><span class="line">    <span class="built_in">Elem</span>(<span class="type">int</span> n,<span class="type">int</span> rd):<span class="built_in">n</span>(n),<span class="built_in">rd</span>(rd)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>非递归形式：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fact</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;Elem&gt; st;</span><br><span class="line">    st.<span class="built_in">push</span>(<span class="built_in">Elem</span>(n, <span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">L0:</span><br><span class="line">    <span class="keyword">if</span> (st.<span class="built_in">top</span>().n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">goto</span> L2;&#125;</span><br><span class="line">    st.<span class="built_in">push</span>(<span class="built_in">Elem</span>(st.<span class="built_in">top</span>().n - <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">goto</span> L0;</span><br><span class="line">L1:</span><br><span class="line">    ret = st.<span class="built_in">top</span>().n * ret;</span><br><span class="line">    <span class="keyword">goto</span> L2;</span><br><span class="line">L2:</span><br><span class="line">    <span class="keyword">switch</span>(st.<span class="built_in">top</span>().rd)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">goto</span> L1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整形式：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Elem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> rd;</span><br><span class="line">    <span class="built_in">Elem</span>(<span class="type">int</span> n, <span class="type">int</span> rd) : <span class="built_in">n</span>(n), <span class="built_in">rd</span>(rd) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fact</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;Elem&gt; st;</span><br><span class="line">    st.<span class="built_in">push</span>(<span class="built_in">Elem</span>(n, <span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">L0:</span><br><span class="line">    <span class="keyword">if</span> (st.<span class="built_in">top</span>().n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">goto</span> L2;&#125;</span><br><span class="line">    st.<span class="built_in">push</span>(<span class="built_in">Elem</span>(st.<span class="built_in">top</span>().n - <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">goto</span> L0;</span><br><span class="line">L1:</span><br><span class="line">    ret = st.<span class="built_in">top</span>().n * ret;</span><br><span class="line">    <span class="keyword">goto</span> L2;</span><br><span class="line">L2:</span><br><span class="line">    <span class="keyword">switch</span>(st.<span class="built_in">top</span>().rd)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">goto</span> L1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">fact</span>(<span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>&#x3D;&#x3D;注意&#x3D;&#x3D;：有许多定义与C++不同，先按照课本上的做笔记</p><ul><li>先进先出（first in first out ）<ul><li>限制访问点的线性表</li><li>所有插入在表的一端进行，所有删除都在表的另一端进行</li></ul></li><li>主要元素<ul><li>队头（front）</li><li>队尾（back）</li></ul></li></ul><h2 id="队列的抽象数据类型"><a href="#队列的抽象数据类型" class="headerlink" title="队列的抽象数据类型"></a>队列的抽象数据类型</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;<span class="comment">//变为空队列</span></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">enQueue</span><span class="params">(<span class="type">const</span> T item)</span></span>;<span class="comment">//将item插入队尾，成功则返回真，否则返回假</span></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">deQueue</span><span class="params">(T &amp; item)</span></span>;<span class="comment">//返回队头元素并将其从队列中删除，成功则返回真</span></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">getFront</span><span class="params">(T&amp; item)</span></span>;<span class="comment">//返回队头元素，但不删除，成功则返回真</span></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">//返回真，若队列已空</span></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isFull</span><span class="params">()</span></span>;<span class="comment">//返回真，若队列已满</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h2 id="队列的实现方式"><a href="#队列的实现方式" class="headerlink" title="队列的实现方式"></a>队列的实现方式</h2><ul><li>顺序队列<ul><li>关键是如何防止假溢出</li></ul></li><li>链式队列<ul><li>用单链表方式存储，队列中每个元素对应链表中的一个结点</li></ul></li></ul><h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><ul><li><p>用向量存储队列元素，用两个变量分别指向队列的前段（front）和尾端（rear）</p><ul><li><em>front</em>:指向当前<em>待出队</em>的元素位置（地址）</li><li><em>rear</em>：指向当前<em>待入队</em>的元素位置（地址）</li></ul></li></ul><img src="/2024/09/20/algorithm/image-20240822132432039-1724411809476-98-1724414108617-48.png" class="" title="image-20240822132432039"><p>队列的溢出</p><ul><li>上溢<ul><li>当队列满时，再做进队操作，所出现的现象</li></ul></li><li>下溢<ul><li>当队列空时，再做删除操作，所出现的现象</li></ul></li><li>假溢出<ul><li>当rear&#x3D;mSize-1时，再作插入运算就会产生溢出，如果这时队列的前段还有许多空位置，这时队列的前端还有许多空位置，这种现象叫做假溢出</li></ul></li></ul><h3 id="队列的类定义"><a href="#队列的类定义" class="headerlink" title="队列的类定义"></a>队列的类定义</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">arrQueue</span>:<span class="keyword">public</span> Queue&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> mSize;<span class="comment">//存放队列的数组大小</span></span><br><span class="line">    <span class="type">int</span> front;<span class="comment">//表示队头所在位置的下标</span></span><br><span class="line">    <span class="type">int</span> rear;<span class="comment">//表示待入队元素所在位置的下标</span></span><br><span class="line">    T* qu;<span class="comment">//存放类型为T的队列元素的数组</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">arrQueue</span>(<span class="type">int</span> size)&#123;<span class="comment">//创建队列的实例</span></span><br><span class="line">            mSize=size<span class="number">+1</span>;<span class="comment">//浪费一个存储空间，以区别队列空和队列满</span></span><br><span class="line">            qu=<span class="keyword">new</span> T[mSize];</span><br><span class="line">            front=rear=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    ~<span class="built_in">arrQueue</span>()&#123;</span><br><span class="line">            <span class="keyword">delete</span>[]qu;<span class="comment">//消除该实例，并释放其空间</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> arrQueue&lt;T&gt;::<span class="built_in">enQueue</span>(<span class="type">const</span> T item)&#123;</span><br><span class="line">    <span class="comment">// item入队，插入队尾</span></span><br><span class="line">    <span class="keyword">if</span>(((rear<span class="number">+1</span>)%mSize)==front)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队列已满，溢出&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    qu[rear]=item;</span><br><span class="line">    rear=(rear<span class="number">+1</span>)%mSize;<span class="comment">//循环后继</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> arrQueue&lt;T&gt;::<span class="built_in">deQueue</span>(T&amp; item)&#123;<span class="comment">//返回队头元素并从队列中删除</span></span><br><span class="line">    <span class="keyword">if</span>(front==rear)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队列为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    item=qu[front];</span><br><span class="line">    front=(front<span class="number">+1</span>)%mSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h2><ul><li>单链表队列</li><li>链接指针的方向是从队列的前端想尾端链接</li></ul><img src="/2024/09/20/algorithm/image-20240822135823322-1724411809476-99-1724414108617-49.png" class="" title="image-20240822135823322"><h3 id="链式队列的类定义"><a href="#链式队列的类定义" class="headerlink" title="链式队列的类定义"></a>链式队列的类定义</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">lnkQueue</span>:<span class="keyword">public</span> Queue&lt;T&gt;&#123;</span><br><span class="line">        <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> size;<span class="comment">//队列中当前元素的个数</span></span><br><span class="line">        Link&lt;T&gt;* front;<span class="comment">//表示队头的指针</span></span><br><span class="line">        Link&lt;T&gt;* rear;<span class="comment">//表示队尾的指针</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">lnkQueue</span>(<span class="type">int</span> size);<span class="comment">//创建队列的实例</span></span><br><span class="line">        ~<span class="built_in">lnkQueue</span>();<span class="comment">//消除该实例，并释放空间</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">enQueue</span><span class="params">(<span class="type">const</span> T item)</span></span>&#123;</span><br><span class="line">    <span class="comment">//item入队，插入队尾</span></span><br><span class="line">    <span class="keyword">if</span>(rear==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">//空队列</span></span><br><span class="line">        front=rear=<span class="keyword">new</span> <span class="built_in">Link</span>&lt;T&gt;(item,<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        rear-&gt;next=<span class="keyword">new</span> <span class="built_in">Link</span>&lt;T&gt;(item,<span class="literal">NULL</span>);</span><br><span class="line">        rear=rear-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deQueue</span><span class="params">(T* item)</span></span>&#123;</span><br><span class="line">    <span class="comment">//返回队头元素并从队列中删除</span></span><br><span class="line">    Link&lt;T&gt;*tmp;</span><br><span class="line">    <span class="keyword">if</span>(size==<span class="number">0</span>)&#123;<span class="comment">//队列为空，没有元素可以出队</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队列为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *item=front-&gt;data;</span><br><span class="line">    tmp=front;</span><br><span class="line">    front=front-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> tmp;</span><br><span class="line">    <span class="keyword">if</span>(front==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        rear=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序队列与链式队列的比较"><a href="#顺序队列与链式队列的比较" class="headerlink" title="顺序队列与链式队列的比较"></a>顺序队列与链式队列的比较</h2><ul><li>顺序队列<ul><li>固定的存储空间</li></ul></li><li>链式队列<ul><li>可以满足大小无法估计的情况</li></ul></li><li>&#x3D;&#x3D;都不允许访问队列内部元素&#x3D;&#x3D;</li></ul><h1 id="队列的应用"><a href="#队列的应用" class="headerlink" title="队列的应用"></a>队列的应用</h1><ul><li><p>只要满足先来先满足服务特性的应用均采用队列</p><p>作为其数据组织方式或中间数据结构</p></li><li><p>调度或缓冲</p><ul><li>消息缓冲器</li><li>邮件缓冲器</li><li>计算机硬设备之间的通信也需要队列作为数据缓冲</li><li>操作系统的资源管理</li></ul></li><li><p>宽度优先搜索</p></li></ul><img src="/2024/09/20/algorithm/047fea9a94fbdae40bb83664e00f92ac-1724411809476-100-1724414108617-50.png" class="" title="img"><p>&#x3D;&#x3D;问题建模&#x3D;&#x3D;</p><img src="/2024/09/20/algorithm/image-20240824091004294.png" class="" title="image-20240824091004294"><p>数据的表示</p><p>用整数<code>status</code>表示上述四位二进制描述的状态</p><img src="/2024/09/20/algorithm/image-20240824091500932.png" class="" title="image-20240824091500932"><p>确定每个角色位置的函数</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">farmer</span><span class="params">(<span class="type">int</span> status)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((status&amp;<span class="number">0x08</span>)!=<span class="number">0</span>);<span class="comment">//人在对岸</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">wolf</span><span class="params">(<span class="type">int</span> status)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((status&amp;<span class="number">0x04</span>)!=<span class="number">0</span>);<span class="comment">//狼在对岸</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">goat</span><span class="params">(<span class="type">int</span> status)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((status&amp;<span class="number">0x02</span>)!=<span class="number">0</span>);<span class="comment">//羊在对岸</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cabbage</span><span class="params">(<span class="type">int</span> status)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>((status&amp;<span class="number">0x01</span>)!=<span class="number">0</span>);<span class="comment">//菜在对岸</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安全状态的判断</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">safe</span><span class="params">(<span class="type">int</span> status)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">goat</span>(status) == <span class="built_in">cabbage</span>(status)) &amp;&amp;(<span class="built_in">goat</span>(status) != <span class="built_in">farmer</span>(status)))</span><br><span class="line"><span class="keyword">return</span>(<span class="literal">false</span>); <span class="comment">// 羊吃白菜</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">goat</span>(status) == <span class="built_in">wolf</span>(status)) &amp;&amp;(<span class="built_in">goat</span>(status) != <span class="built_in">farmer</span>(status)))</span><br><span class="line"><span class="keyword">return</span>(<span class="literal">false</span>); <span class="comment">// 狼吃羊</span></span><br><span class="line"><span class="keyword">return</span>(<span class="literal">true</span>); <span class="comment">// 其它状态为安全</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>算法抽象</p><ul><li><p>问题变为</p><p>从状态0000(整数0)出发，寻找全部由安全状态构成的状态序列，以状态1111(整数15)为最终目标</p></li><li><p>状态序列中每个状态都可以从前一状态通过农夫(可以带一样东西)划船过河的动作到达</p></li><li><p>序列中不能出现重复状态</p></li></ul><p>算法设计</p><img src="/2024/09/20/algorithm/image-20240824092836924.png" class="" title="image-20240824092836924"><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串基本概念"><a href="#字符串基本概念" class="headerlink" title="字符串基本概念"></a>字符串基本概念</h2><h3 id="字符串的逻辑结构"><a href="#字符串的逻辑结构" class="headerlink" title="字符串的逻辑结构"></a>字符串的逻辑结构</h3><ul><li>特殊的线性表，即元素为&#x3D;&#x3D;字符（char）&#x3D;&#x3D;的线性表</li><li>简称”&#x3D;&#x3D;串&#x3D;&#x3D;”，&#x3D;&#x3D;零个&#x3D;&#x3D;或&#x3D;&#x3D;多个字符&#x3D;&#x3D;&#x2F;符号构成的有限序列<ul><li>$$n(\geq 0)$$个字符的有限序列，一般记作<ul><li>$$S:c_0c_1c_2……c_{n-1}$$</li></ul></li><li>S为串名，$$c_0c_1c_2……c_{n-1}$$是串值</li><li>$$c_i$$串中$$i$$位置上的字符</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;数据结构与算法&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;figure class=&quot;highlight latex&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a&lt;sp</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://187370.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://187370.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数算" scheme="https://187370.github.io/tags/%E6%95%B0%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>ics第二周:信息的表示和处理续</title>
    <link href="https://187370.github.io/2024/09/14/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86%E7%BB%AD/"/>
    <id>https://187370.github.io/2024/09/14/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86%E7%BB%AD/</id>
    <published>2024-09-14T05:58:04.000Z</published>
    <updated>2024-09-18T07:18:02.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h1><h2 id="二进制小数"><a href="#二进制小数" class="headerlink" title="二进制小数"></a>二进制小数</h2><p>简而言之，就是原来的整数多了个小数点。</p><img src="/2024/09/14/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86%E7%BB%AD/image-20240914163024513.png" class="" title="image-20240914163024513"><p>浮点数可以这样表示：<br>$$<br>\sum_{k&#x3D;-j}^{i}b_{k}\times\ 2^{k}<br>$$<br>例如：<br>$$<br>5\frac{3}{4}&#x3D;101.11_{2},2\frac{7}{8}&#x3D;10.111_{2},1\frac{7}{16}&#x3D;1.0111_{2}<br>$$<br>这样的好处是，除以二就相当于右移，并且可以横跨小数点。</p><p>但是这种表示方式有明显的限制，比如说，只有形如<br>$$<br>\frac{x}{2^{k}}<br>$$<br>可以被精确表示，其他的就只能变成循环的小数，例如<br>$$<br>\frac{1}{3}&#x3D;0.0101010101[01]…_{2}<br>$$<br>除此之外，另一个问题在于，如果给定了 w 个比特，能够表达的数字其实是有限的.</p><h2 id="IEEE浮点数"><a href="#IEEE浮点数" class="headerlink" title="IEEE浮点数"></a>IEEE浮点数</h2><blockquote><p>IEEE 的浮点数标准更多是从数值角度来建立的，对于舍入，上溢出和下溢出都有比较统一的处理方法。但与此同时也给硬件优化带来了比较大的困难。因为和平时使用的数制也有一定差异，从理解的角度来看不够直观，但是好在主流的 CPU 都支持浮点数，所以我们不必过多涉及这方面的细节。</p></blockquote><p><code>IEEE</code>浮点标准用以下形式表示一个数：<br>$$<br>(-1)^{s}\times M\times 2^{E}<br>$$<br>注意：</p><ul><li>符号:s决定这数是负数（s&#x3D;1）还是正数(s&#x3D;0)</li><li>尾数:M是一个二进制小数，它的范围是[1,2),[0,1)</li><li>阶码：E对的作用是对浮点数加权，这个权重是2的E次幂。</li></ul><p>那么，我们可以把一个浮点数表示为三个字段</p><img src="/2024/09/14/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86%E7%BB%AD/image-20240914165401268.png" class="" title="image-20240914165401268"><p>其中呢<code>s</code>即代表是符号位</p><p><code>exp</code>是编码后的<code>E</code></p><p><code>frac</code>是编码后的<code>M</code></p><p>我们根据exp的不同分为三种情况</p><h3 id="规格化值（Normalized-Values）"><a href="#规格化值（Normalized-Values）" class="headerlink" title="规格化值（Normalized Values）"></a>规格化值（<strong>Normalized Values</strong>）</h3><p>条件：exp的位模式记不全0（数值0），也不全1（单精度为255，双精度为2047）时。</p><p>再来回顾一下我们计算浮点数的公式：<br>$$<br>(-1)^{s}\times M\times 2^{E}<br>$$<br>这种情况下，阶段字段被解释以<code>偏置</code>的形式表示的有符号整数。</p><p>关系是<code>E=exp-Bias</code></p><ul><li><p>Exp: 是 exp 编码区域的无符号数值</p></li><li><p>Bias：值为<br>$$<br>2^{k-1}-1<br>$$</p><p>的偏移量，其中 k 是 exp 编码的位数，也就是说</p><ul><li>单精度：127（Exp: 1…254, E: -126…127）</li><li>双精度：1023（Exp: 1…2046, E: -1022…1023）</li></ul><blockquote><p><strong>问题：为什么不采用补码形式表示 exp，而是要用一个偏置（Bias）？</strong></p><p>采用偏置（Bias）表示指数部分的主要原因有以下几点：</p><ol><li><strong>简化比较操作</strong>：</li></ol><ul><li>使用偏置表示后，浮点数的二进制表示可以直接用于比较大小。由于偏置后的指数值都是非负的，浮点数的整体二进制表示与其数值大小呈递增关系，这使得硬件在比较两个浮点数大小时，只需按位比较即可。</li><li>如果使用补码表示，负指数会导致最高位为 1，正指数最高位为 0，无法直接按位比较大小，增加了硬件设计的复杂性。</li></ul><ol start="2"><li><strong>简化运算电路</strong>：</li></ol><ul><li>浮点数运算中，指数部分需要经常进行加减操作。采用偏置表示，指数加减运算可以直接进行，无需考虑符号位的处理。</li><li>使用补码表示时，涉及符号位的处理，硬件需要额外的逻辑来处理正负数的运算，增加了电路的复杂性和延迟。</li></ul><ol start="3"><li><strong>避免负数处理的复杂性</strong>：</li></ol><ul><li>在硬件层面，处理无符号数比处理有符号数更为简单高效。采用偏置表示，可以将指数视为无符号数处理，避免了负数运算的复杂性。</li></ul><ol start="4"><li><strong>兼容非规格化数和特殊值表示</strong>：</li></ol><ul><li>浮点数表示中，指数全为 0 或全为 1 用于表示非规格化数和特殊值（如无穷大、NaN）。使用偏置表示，可以更方便地定义这些特殊情况的编码。</li></ul></blockquote></li></ul><p>这样我们就解决了E的编码问题</p><ul><li>对于<code>s</code>:正数为0，负数为1</li><li>对于<code>M</code>:我们观察到，对于规格化数，整数部分一直是1，所以当把M编码成<code>frac</code>字段时，我们可以忽略整数部分，用<code>frac</code>字段只表示<code>M</code>的小数部分。</li></ul><p>我们举个例子：</p><blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&gt;<span class="type">float</span> F=<span class="number">15213.0</span>;</span><br></pre></td></tr></table></figure><p>那么：<br>$$<br>15213_{10}&#x3D;11101101101101_{2}&#x3D;(-1)^{0}\times 1.1101101101101_{2}\times 2^{13}<br>$$</p><ul><li>s&#x3D;0</li><li>exp&#x3D;13+127&#x3D;140</li><li>M&#x3D;11011011011010000000000</li></ul><p>那么15213的浮点数表示为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;0 10001100 11011011011010000000000</span><br><span class="line">&gt;s   exp             frac</span><br></pre></td></tr></table></figure></blockquote><h3 id="非规范化值（Denormalized-Values）"><a href="#非规范化值（Denormalized-Values）" class="headerlink" title="非规范化值（Denormalized Values）"></a>非规范化值（<strong>Denormalized Values</strong>）</h3><p>条件：exp&#x3D;000…0</p><p>值是非规范化的，意思是，虽然实数轴上原来连续的值会被规范到有限的定值上，但是并些定值之间的间距也是一样的。</p><p>继续看这个式子<br>$$<br>(-1)^{s}\times M\times 2^{E}<br>$$<br>和之前不同的是：<br>$$<br>E&#x3D;1-Bias<br>$$<br>为啥不同嘞</p><blockquote><p>在非规范化值（Denormalized Values）的情况下，指数部分全为零，表达式中的指数 (E) 不再是像规范化值那样的 (E &#x3D; exp - Bias)，而是采用了特殊的情况：</p><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><ol><li><strong>表示最小的数值</strong>：</li></ol><ul><li>规范化的浮点数有最小的有效数值范围，但如果指数部分用尽仍然需要表示更小的数，便引入了非规范化值。此时不再遵循常规的指数偏移量（Bias），因为指数已经达到了最小的可能值，所以通过降低指数权重来表示更小的数。</li></ul><ol start="2"><li><strong>保持数值的连续性</strong>：</li></ol><ul><li>规范化数和非规范化数之间的转换允许浮点数能够表示非常小的数值，从而在接近 0 的地方保持数值的连续性。</li><li>如果没有非规范化数，规范化数所能表示的最小数值与 0 之间会有很大的空白区域。为了避免这种“空洞”，非规范化值提供了更细致的分辨率，使得浮点数可以表示比最小规范化数更小的数值。</li></ul><ol start="3"><li><strong>特殊指数处理</strong>：</li></ol><ul><li>当指数部分全为 0（即 exp &#x3D; 000…0）时，浮点数不再使用偏移量来计算指数 (E)。为了保持连贯，设定 (E &#x3D; 1 - Bias)，而不是常规的 (E &#x3D; exp - Bias)，确保从规范化数过渡到非规范化数时，数值的表示是平滑的。</li></ul><h3 id="非规范化数的表达："><a href="#非规范化数的表达：" class="headerlink" title="非规范化数的表达："></a>非规范化数的表达：</h3><p>在这种情况下：</p><ul><li>指数 (E &#x3D; 1 - Bias) 保证浮点数可以表示比最小规范化数还要小的数。</li><li>尾数 (M) 依然遵循通常的浮点数尾数表示规则。</li></ul><p>这样设计的目的是为了在浮点数接近 0 时，能以更高的精度表示小数，并使得小数值的间距逐渐变得更小。</p></blockquote><p>非规范化数的两个用途：</p><ul><li>可以表示0（exp全为0且<code>frac</code>全为0）：<ul><li>符号位为0时，是+0.0</li><li>符号位为1时，是-0.0</li></ul></li><li>表示接近于0的数在 exp&#x3D;000..0 且 <code>frac≠000…0</code>数值是接近 0 的，并且间距是一致的</li></ul><h3 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h3><p>条件：<code>exp</code>全为1</p><h4 id="无穷"><a href="#无穷" class="headerlink" title="无穷"></a>无穷</h4><p>当<code>exp</code>全为1，<code>frac</code>全为0时，表示<br>$$<br>\infty<br>$$<br>当s&#x3D;0时，表示<br>$$<br>+\infty<br>$$<br>当s&#x3D;1时，表示<br>$$<br>-\infty<br>$$</p><h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a><code>NaN</code></h4><p>当<code>exp</code>全为1，<code>frac</code>不全为0时，我们不认为是一个数值（Not-a-Number,NaN）,用来表示诸如<br>$$<br>\sqrt{-1},\infty-\infty<br>$$<br>等无法确定的值</p><h2 id="数字实例"><a href="#数字实例" class="headerlink" title="数字实例"></a>数字实例</h2><p>原理不够清晰，来看看例子咯</p><p>数轴表示：</p><img src="/2024/09/14/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86%E7%BB%AD/image-20240914191504732.png" class="" title="image-20240914191504732"><p>接下来，我们以采用 1 位符号位，4 位 exp 位，3 位 frac 位，描述一下三类数字：、</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    s exp  frac   E   值</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">    0 0000 000   -6   0   # 这部分是非规范化数值，下一部分是规范化值</span><br><span class="line">    0 0000 001   -6   1/8 * 1/64 = 1/512 # 能表示的最接近零的值</span><br><span class="line">    0 0000 010   -6   2/8 * 1/64 = 2/512 </span><br><span class="line">    ...</span><br><span class="line">    0 0000 110   -6   6/8 * 1/64 = 6/512</span><br><span class="line">    0 0000 111   -6   7/8 * 1/64 = 7/512 # 能表示的最大非规范化值</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">    0 0001 000   -6   8/8 * 1/64 = 8/512 # 能表示的最小规范化值</span><br><span class="line">    0 0001 001   -6   9/8 * 1/64 = 9/512</span><br><span class="line">    ...</span><br><span class="line">    0 0110 110   -1   14/8 * 1/2 = 14/16</span><br><span class="line">    0 0110 111   -1   15/8 * 1/2 = 15/16 # 最接近且小于 1 的值</span><br><span class="line">    0 0111 000    0   8/8 * 1 = 1</span><br><span class="line">    0 0111 001    0   9/8 * 1 = 9/8      # 最接近且大于 1 的值</span><br><span class="line">    0 0111 010    0   10/8 * 1 = 10/8</span><br><span class="line">    ...</span><br><span class="line">    0 1110 110    7   14/8 * 128 = 224</span><br><span class="line">    0 1110 111    7   15/8 * 128 = 240   # 能表示的最大规范化值</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">    0 1111 000   n/a  无穷               # 特殊值</span><br></pre></td></tr></table></figure><p>我们可以观察到以下几个规律：</p><ul><li>最大非规格化值7&#x2F;512与最小规格化数8&#x2F;512之间是平滑转变。</li></ul><blockquote><p>现在来思考：如果我们非规格化的数没有特殊处理即E&#x3D;-Bias，会怎样呢？</p><p>那么</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> s exp  frac   E   值</span><br><span class="line">&gt;------------------------------------------------------------------</span><br><span class="line"> 0 0000 001   -7   15/8 * 1/128 = 15/1024 </span><br></pre></td></tr></table></figure><p>这就是最最接近于0的数啦，我们发现，从14&#x2F;1024到0这部分的值留下了很大的空白</p><p>这就是我们特殊处理非规格数的原因！</p></blockquote><ul><li>最大的规格化数是240，超出这个数就会变成无穷</li><li>还有一个有趣的属性，这里的值的位表达式解释为无符号整数，它们是按升序排列的，就像它们表示的浮点数一样。这不是偶然的——IEEE格式如此设计就是为了浮点数能够使用证书排序函数来进行排序。</li></ul><h2 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h2><p>为啥需要舍入，IEEE标准限制了浮点数的范围和精度，所以浮点运算只能近似表示实数运算。</p><p>对于浮点数的加法和乘法来说，我们可以先计算出准确值，然后转换到合适的精度。在这个过程中，既可能会溢出，也可能需要舍入来满足 <code>frac</code> 的精度。</p><p>我们采用怎样的舍入方式呢：</p><p><code>向偶数舍进</code>：即如果出现在中间的情况，舍入之后最右边的值要是偶数。</p><ul><li>十进制例子：</li></ul><table><thead><tr><th>原数值</th><th>舍入结果</th></tr></thead><tbody><tr><td>2.8949999</td><td>2.89</td></tr><tr><td>2.8950001</td><td>2.90</td></tr><tr><td>2.8950000</td><td>2.90</td></tr></tbody></table><ul><li>二进制例子：</li></ul><table><thead><tr><th>原数值</th><th>舍入结果</th></tr></thead><tbody><tr><td>10.00011</td><td>10.00</td></tr><tr><td>10.00110</td><td>10.01</td></tr><tr><td>10.11100</td><td>11.00</td></tr><tr><td>10.10100</td><td>10.10</td></tr></tbody></table><h2 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h2><h3 id="浮点数乘法"><a href="#浮点数乘法" class="headerlink" title="浮点数乘法"></a>浮点数乘法</h3><p>$$<br>(-1)^{s_1}M_{1}2^{E_{1}}\times (-1)^{s_{2}}M_{2}2^{E_{2}}<br>$$</p><p>结果是<br>$$<br>(-1)^{s}M2^{E}<br>$$<br>其中:s&#x3D;s_1^s_2<br>$$<br> M&#x3D;M_{1}\times M_{2},E&#x3D;E_{1}+E_{2}<br>$$<br><code>注意</code>：</p><ul><li><p>如果 M 大于等于 2，那么把 M 右移，并增加 E 的值。</p></li><li><p>如果 E 超出了可以表示的范围，溢出</p></li><li><p>把 M 舍入到 frac 的精度</p></li><li><p>相乘可能产生 infinity 或者 NaN</p></li><li><p>满足交换率</p></li><li><p>不满足结合律（因为舍入会造成精度损失）</p></li><li><p>乘以 1 等于原来的数</p></li><li><p>不满足分配率 <code>1e20*(1e20-1e20)=0.0</code> 但 <code>1e20*1e20-1e20*1e20=NaN</code></p></li><li><p>除了 infinity 和 NaN，满足单调性，即 a≥b→a×c≥a×b</p></li></ul><h3 id="浮点数加法"><a href="#浮点数加法" class="headerlink" title="浮点数加法"></a>浮点数加法</h3><p>$$<br>(-1)^{s_1}M_{1}2^{E_{1}}+ (-1)^{s_{2}}M_{2}2^{E_{2}}<br>$$</p><p>这里假设 E1&gt;E2,结果是<br>$$<br>(-1)^{s}M2^{E}<br>$$<br>则<br>$$<br>s&#x3D;s_{1},M&#x3D;尾数调整后的和,E&#x3D;E_{1}<br>$$</p><h4 id="浮点数加法的正确过程："><a href="#浮点数加法的正确过程：" class="headerlink" title="浮点数加法的正确过程："></a>浮点数加法的正确过程：</h4><ol><li><p><strong>对齐指数</strong>：如果两个浮点数的指数不同，那么我们需要通过右移尾数较小的数来对齐它们的指数，使得 (E_1 &#x3D; E_2)。这一步决定了哪些部分被舍入或者丢弃。</p><ul><li>假设 (E_1 &gt; E_2)，那么我们需要将 (M_2) 右移 (E_1 - E_2) 位来对齐指数。</li></ul></li><li><p><strong>比较尾数并决定符号</strong>：此时才可以比较尾数。我们根据对齐后的尾数比较来决定结果的符号 (s)，以及进行尾数的加减操作。如果 (M_1) 比 (M_2) 大，那么结果的符号与 (s_1) 相同，否则符号与 (s_2) 相同。</p></li><li><p><strong>尾数相加或相减</strong>：根据两个数的符号，如果符号相同，就直接相加尾数；如果符号不同，就进行尾数的减法。</p></li><li><p><strong>规范化与舍入</strong>：相加或相减后的结果可能需要再次进行标准化处理，例如如果尾数超过 1 或者小于 1，则需要调整尾数和指数。另外，也需要对结果进行舍入，以确保精度。</p></li><li><p><strong>溢出处理</strong>：如果最后的指数超出了浮点数能表示的范围，会产生正无穷大或负无穷大。</p></li></ol><h4 id="重要的是："><a href="#重要的是：" class="headerlink" title="重要的是："></a>重要的是：</h4><p><strong>指数的对齐</strong> 是浮点数加法的核心步骤，因为它影响到尾数的比较和计算结果的精度。</p><h4 id="基本性质："><a href="#基本性质：" class="headerlink" title="基本性质："></a>基本性质：</h4><ul><li><strong>相加可能产生 infinity 或 NaN</strong>。</li><li><strong>满足交换率</strong>：a+b&#x3D;b+a</li><li><strong>不满足结合律</strong>：舍入误差使得</li></ul><p>$$<br>(a+b)+c\neq a+(b+c)<br>$$</p><ul><li><strong>加 0 不改变结果</strong>：a+0&#x3D;a</li><li><strong>不满足分配律</strong></li></ul><p>$$<br>：a×(b+c)≠a×b+a×c在浮点数中不成立。<br>$$</p><h4 id="单调性："><a href="#单调性：" class="headerlink" title="单调性："></a>单调性：</h4><p>除了无穷大和 NaN，浮点数加法满足单调性，即<br>$$<br>如果 a≥b那么 a+c≥b+c<br>$$</p><h3 id="C语言中的浮点数"><a href="#C语言中的浮点数" class="headerlink" title="C语言中的浮点数"></a>C语言中的浮点数</h3><img src="/2024/09/14/ics%E7%AC%AC%E4%BA%8C%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86%E7%BB%AD/image-20240915115611331.png" class="" title="image-20240915115611331">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浮点数&quot;&gt;&lt;a href=&quot;#浮点数&quot; class=&quot;headerlink&quot; title=&quot;浮点数&quot;&gt;&lt;/a&gt;浮点数&lt;/h1&gt;&lt;h2 id=&quot;二进制小数&quot;&gt;&lt;a href=&quot;#二进制小数&quot; class=&quot;headerlink&quot; title=&quot;二进制小数&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://187370.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSAPP" scheme="https://187370.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CSAPP/"/>
    
    
    <category term="笔记" scheme="https://187370.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="ics" scheme="https://187370.github.io/tags/ics/"/>
    
  </entry>
  
  <entry>
    <title>ics第一周:信息的表示和处理</title>
    <link href="https://187370.github.io/2024/09/12/ics%E7%AC%AC%E4%B8%80%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/"/>
    <id>https://187370.github.io/2024/09/12/ics%E7%AC%AC%E4%B8%80%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/</id>
    <published>2024-09-12T10:49:06.000Z</published>
    <updated>2024-09-18T07:16:05.927Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="为什么学习这本书"><a href="#为什么学习这本书" class="headerlink" title="为什么学习这本书"></a>为什么学习这本书</h1><h2 id="很多东西并不像看起来那样简单"><a href="#很多东西并不像看起来那样简单" class="headerlink" title="很多东西并不像看起来那样简单"></a>很多东西并不像看起来那样简单</h2><p>比如：</p><ul><li>算法性能分析结果$\neq$实际程序性能（底层实现问题）</li><li>计算机系统中的算术$\neq$数学中的算术（溢出问题）</li></ul><p>我们知道，在纸面上看<br>$$<br>         (x+1)^2≥0<br>$$</p><p>是一定的，但是在计算机中就不一定了，比方说：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">lldb</span></span><br><span class="line">(lldb) <span class="built_in">print</span> (<span class="number">233333</span> + <span class="number">1</span>) * (<span class="number">233333</span> + <span class="number">1</span>)</span><br><span class="line">(<span class="type">int</span>) $<span class="number">0</span> = <span class="number">-1389819292</span></span><br></pre></td></tr></table></figure><p>这就是整数的溢出，当然用浮点数的表示方法可以避免溢出，但是浮点数有精度问题</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># dawang at wdxtub.local in ~ [9:05:02]</span></span><br><span class="line">$ <span class="built_in">lldb</span></span><br><span class="line">(lldb) <span class="built_in">print</span> (<span class="number">1e20</span> + <span class="number">-1e20</span>) + <span class="number">3.14</span></span><br><span class="line">(<span class="type">double</span>) $<span class="number">0</span> = <span class="number">3.1400000000000001</span></span><br><span class="line">(lldb) print <span class="number">1e20</span> + (<span class="number">-1e20</span> + <span class="number">3.14</span>)</span><br><span class="line">(<span class="type">double</span>) $<span class="number">1</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="你了解内存吗？"><a href="#你了解内存吗？" class="headerlink" title="你了解内存吗？"></a>你了解内存吗？</h2><p>我们都学过的<code>C或者C++</code>都没有提供任何内存保护机制，再加上强大且危险的指针，出现溢出或者段错误实在是家常便饭。这类问题的问题在于，很难确定是程序本身的问题，还是编译器或者系统的问题。</p><p>很多著名网站都是由于内存错误『引发』的，比方说<code> stackoverflow 和 segmentfault</code>。虽然现代编程语言大多采用了比较完善的内存保护的机制，但是从 C 时代流传下来的这些错误名称则随着时间推移成为了经典，颇有『为人不识 XX 兰，阅尽 XX 也枉然』的既视感。</p><hr><p>接下来，ics(immediate commit suicide——立即自杀)，你准备好了吗？</p><h1 id="信息的表示和处理"><a href="#信息的表示和处理" class="headerlink" title="信息的表示和处理"></a>信息的表示和处理</h1><h2 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h2><ul><li>最小的可寻址的内存单元：<code>字节</code>(8位的块)</li><li>机器级程序将内存视为一个非常大的字节数组，成为<code>虚拟内存</code>(<code>virtual memory</code>)</li><li>内存的每个字节都由一个唯一的数字来表示，成为它的<code>地址</code>(<code>address</code>).</li><li>所有可能地址集合就称为<code>虚拟地址空间</code>(<code>virtual address space</code>)</li></ul><p>字节用十六进制表示。</p><img src="/2024/09/12/ics%E7%AC%AC%E4%B8%80%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20240912191540999.png" class="" title="image-20240912191540999"><h3 id="字数据大小"><a href="#字数据大小" class="headerlink" title="字数据大小"></a>字数据大小</h3><ul><li><code>字长</code>:每台计算机都有一个字长(word size)，指明指针数据的标称大小。</li></ul><p>解释：因为虚拟地址是以这样的一个字来编码的，所以字长决定的最重要的系统参数就是虚拟地址空间的最大大小，也就是说，对于一个字长为w位的机器而言，虚拟地址的范围为</p><p>​$$0 \sim 2^w-1$$</p><p>程序最多访问</p><p>​$$2^{w}$$</p><p>字节。</p><blockquote><p>字长（word size）指的是计算机处理器在一次运算或数据处理操作中，能够同时处理的二进制位数。字长直接决定了处理器在一条指令中可以处理的数据量的大小，影响了计算机的性能、存储容量和指令集设计。</p><h3 id="字长的具体表现："><a href="#字长的具体表现：" class="headerlink" title="字长的具体表现："></a>字长的具体表现：</h3><ol><li><p><strong>处理器处理数据的能力</strong>：字长决定了CPU一次能够处理的二进制位数。例如，32位处理器一次能处理32位二进制数据，而64位处理器一次能处理64位二进制数据。</p></li><li><p><strong>内存寻址能力</strong>：字长影响处理器能够寻址的内存空间大小。例如，在32位处理器中，最大可寻址内存为2^32个字节（即4GB）；而在64位处理器中，最大可寻址内存空间可达到2^64个字节，理论上是非常庞大的（实际上因其他技术因素限制通常不到此上限）。</p></li><li><p><strong>指令集架构（ISA）</strong>：字长决定了处理器的指令宽度，影响了指令的格式、寄存器大小以及数据操作方式。例如，64位指令集架构（如x86-64）会包含针对64位寄存器的操作指令，而32位指令集架构（如x86）只能处理32位的寄存器。</p></li><li><p><strong>性能</strong>：较大的字长意味着处理器能够在一次运算中处理更多的数据，通常会提高程序的运行效率。然而，实际的性能提升还取决于应用程序和操作系统是否能够充分利用这种大字长。</p></li><li><p><strong>硬件设计</strong>：字长影响到计算机硬件设计中的其他部分，比如寄存器、总线、ALU（算术逻辑单元）等的设计。字长越大，通常硬件的复杂性、成本和功耗都会增加。</p></li></ol><h3 id="常见的字长："><a href="#常见的字长：" class="headerlink" title="常见的字长："></a>常见的字长：</h3><ul><li><strong>8位</strong>：早期的微处理器通常为8位，如Intel 8080。</li><li><strong>16位</strong>：如Intel 8086，广泛用于20世纪80年代。</li><li><strong>32位</strong>：如Intel 80386、ARM Cortex-A32等，现代计算机中曾经非常流行。</li><li><strong>64位</strong>：现代计算机的主流字长，常见于x86-64、ARM64架构的处理器中。</li></ul><p>总结来说，字长是计算机体系结构中一个重要的指标，它不仅影响处理器的设计，还影响到整个计算机系统的性能和使用体验。</p></blockquote><h3 id="寻址和字节顺序"><a href="#寻址和字节顺序" class="headerlink" title="寻址和字节顺序"></a>寻址和字节顺序</h3><p>在几乎所有机器上，多字节对象都被存储为连续的字节序列，对象的地址为所使用字节的<code>最小的地址。</code></p><p>排列表示对象的两个通用规则：</p><p>考虑一个<code>w</code>位的整数，位表示为</p><p>​$$[x_{w-1},x_{w-2},…,x_{0}]$$</p><ul><li>最高有效位:</li></ul><p>$$<br>x_{w-1}<br>$$</p><ul><li>最低有效位<br>$$<br>x_{0}<br>$$</li></ul><p>假设w是8的倍数，这些位就能被划分为字节，其中<code>最高有效字节</code>包含位<br>$$<br>[x_{w-1},x_{w-2},…,x_{w-8}]<br>$$<br><code>最低有效字节</code><br>$$<br>[x_{7},x_{6},…,x_{0}]<br>$$<br>排序规则：</p><ul><li><code>小端法</code>:某些机器选择在内存中按照从最低有效字节到最高有效字节的顺序存储对象</li><li><code>大端法</code>:另一些机器则按照从最高有效字节到最低有效字节的顺序存储</li></ul><img src="/2024/09/12/ics%E7%AC%AC%E4%B8%80%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20240912191056090.png" class="" title="image-20240912191056090"><h3 id="C语言中的位级运算"><a href="#C语言中的位级运算" class="headerlink" title="C语言中的位级运算"></a>C语言中的位级运算</h3><ul><li>与 And：<code>A=1</code> 且 <code>B=1</code> 时，<code>A&amp;B = 1</code></li><li>或 Or：<code>A=1</code> 或 <code>B=1</code> 时，<code>A|B = 1</code></li><li>非 Not：<code>A=1</code> 时，<code>~A=0</code>；<code>A=0</code> 时，<code>~A=1</code></li><li>异或 Exclusive-Or(Xor)：<code>A=1</code> 或 <code>B=1</code> 时，<code>A^B = 1</code>；<code>A=1</code> 且 <code>B=1</code> 时，<code>A^B = 0</code></li></ul><h3 id="C语言中的逻辑运算"><a href="#C语言中的逻辑运算" class="headerlink" title="C语言中的逻辑运算"></a>C语言中的逻辑运算</h3><ul><li><p>逻辑与 And：<code>A</code>非零且<code>B</code>非零时，<code>A&amp;&amp;B</code>为非零值；否则为零。</p></li><li><p>逻辑或 Or：<code>A</code>非零或<code>B</code>非零时，<code>A||B</code>为非零值；否则为零。</p></li><li><p>逻辑非 Not：<code>A</code>非零时，<code>!A</code>为零；<code>A</code>为零时，<code>!A</code>为非零值。</p></li></ul><h3 id="C语言中的移位运算"><a href="#C语言中的移位运算" class="headerlink" title="C语言中的移位运算"></a>C语言中的移位运算</h3><ul><li>左移：x&lt;&lt;k表示x向左移动k位，丢弃最高的k位，并在右端k位</li><li>逻辑右移: 左端补k个0，右端丢弃k位</li><li>算术右移：左端补k个1,右端丢弃k位</li></ul><h2 id="整数表示"><a href="#整数表示" class="headerlink" title="整数表示"></a>整数表示</h2><p>整数分为无符号和有符号</p><p>无符号的直接用原码表示</p><p>有符号的用补码表示</p><ul><li>$$B2U_{w}(\overrightarrow x)&#x3D;\sum_{i&#x3D;0}^{w-1}2^i$$(二进制转换成无符号整数)</li><li>$$B2T_{w}(\overrightarrow x)&#x3D;-x_{w-1}2^{w-1}+\sum_{i&#x3D;0}^{w-2}2^i$$其中 <code>x_(w-1)</code> 是符号位。符号位为 1 表示负数，0 表示正数。补码形式便于计算和表示负数。这样设计是为了简化硬件加法器的实现，使得减法操作可以通过加法（和补码转换）来完成。</li><li>$$U2B_{w}$$的反函数是$$B2U_{w}$$</li><li>$$T2B_{w}$$的反函数是$$B2T_{w}$$</li></ul><h3 id="整型表示的特点"><a href="#整型表示的特点" class="headerlink" title="整型表示的特点"></a>整型表示的特点</h3><p>接下来我们看看这种表示形式的特点，以及溢出的集中情况，假设字长为 <code>w</code>，定义如下的常量：</p><ul><li>UMin &#x3D; 0 即 000…0</li><li>UMax &#x3D; 2w−12w−1 即 111…1</li><li>TMin &#x3D; −2w−1−2w−1 即 100…0</li><li>TMax &#x3D; 2w−1−12w−1−1 即 011…1</li><li>Minus 1 即 111…1</li></ul><p>这里的 U 表示无符号数，T 表示补码(Two’s Complement)，对于字长为 16 的情况来说，我们有：</p><img src="/2024/09/12/ics%E7%AC%AC%E4%B8%80%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20240912194818392.png" class="" title="image-20240912194818392"><p>对于不同的 word size，数值也会有很大的变化</p><img src="/2024/09/12/ics%E7%AC%AC%E4%B8%80%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20240912194838353.png" class="" title="image-20240912194838353"><p>观察可以得知两个很重要的特性</p><ul><li>|TMin| &#x3D; TMax + 1 (范围并不是对称的)</li><li>UMax &#x3D; 2*TMax + 1</li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>$$<br>T2U_{w}(x)&#x3D;B2U_{w}(T2W_{w}(x))&#x3D;\begin{cases}x+2_{w},,,x&lt;0\ x,\ x\geq0\end{cases}<br>$$</p><img src="/2024/09/12/ics%E7%AC%AC%E4%B8%80%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20240912195641068.png" class="" title="image-20240912195641068"><p>在进行有符号和无符号数的互相转换时：</p><ul><li>具体每一个字节的值不会改变，改变的是计算机解释当前值的方式</li><li><code>如果一个表达式既包含有符号数也包含无符号数，那么会被隐式转换成无符号数进行比较</code></li></ul><p>例如：</p><img src="/2024/09/12/ics%E7%AC%AC%E4%B8%80%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20240912195732889.png" class="" title="image-20240912195732889"><h3 id="类型扩展和截取"><a href="#类型扩展和截取" class="headerlink" title="类型扩展和截取"></a>类型扩展和截取</h3><ul><li>扩展（例如从<code>short int</code>到<code>int</code>）<ul><li>无符号数：加 0</li><li>有符号数：加符号位</li></ul></li></ul><p>证明:</p><p>​原数&#x3D;$$-x_{w-1}2^{w-1}+\sum_{i&#x3D;1}^{w-2}x_{i}2^{i}$$</p><p>​转换后&#x3D;$$-x_{w-1}*2^{w^{‘}-1}+\sum_{i&#x3D;1}^{w^{‘}-2}x_{i}2^{i}$$</p><p>转换后-原数&#x3D;$$x_{w-1}2^{w-1}-x_{w-1}*2^{w^{‘}-1}+\sum_{i&#x3D;w-1}^{w^{‘}-2}x_{i}2^{i}&#x3D;0$$</p><ul><li>截取(例如<code>unsigned</code>到<code>unsigned short</code>,对于小的数字可以得到预期结果)<ul><li>无符号数：<code>mod</code>操作$$x^{‘}&#x3D;x\ mod\ 2^{k}$$</li><li>有符号数:近似<code>mod</code>操作$$x^{‘}&#x3D;U2T_{k}(x\ mod\ 2^{k})$$</li></ul></li></ul><p>举个例子</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">short</span> <span class="type">int</span> x = <span class="number">15213</span>;</span><br><span class="line"><span class="type">int</span> ix = (<span class="type">int</span>) x;</span><br><span class="line"><span class="type">short</span> <span class="type">int</span> y = <span class="number">-15213</span>;</span><br><span class="line"><span class="type">int</span> iy = (<span class="type">int</span>) y;</span><br></pre></td></tr></table></figure><img src="/2024/09/12/ics%E7%AC%AC%E4%B8%80%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20240912200753886.png" class="" title="image-20240912200753886"><h2 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h2><ul><li>为什么正数相加会得出负数</li><li>为什么x&lt;y和比较表达式x-y&lt;0会产生不同的结果？</li></ul><h3 id="无符号加法"><a href="#无符号加法" class="headerlink" title="无符号加法"></a>无符号加法</h3><p>$$+<em>{w}^{u}$$该操作吧整数和x+y截断为w位得到的结果<br>$$<br>x+</em>{w}^{u}y&#x3D;(x+y)mod\ 2^{w}<br>$$<br>假设 <code>w=3</code>，那么能够表达的数字范围是 <code>000~111(0~7)</code>（括号内为二进制对应的十进制数值，后同），那么如果一个表达式是 <code>110+111(6+7)</code>，原本应该等于 <code>1101(13)</code>，但是由于 <code>w=3</code>，所以最终的结果是 <code>101(5)</code>，也就是发生了溢出，两个无符号数相加，反而变『小』(检测是否溢出的充要条件)。</p><h3 id="补码加法"><a href="#补码加法" class="headerlink" title="补码加法"></a>补码加法</h3><p>仍然是截断为w位<br>$$<br>x+<em>{w}^{t}y&#x3D;\begin{cases}<br>x+y-2^{w},\ 2^{w-1}\le x+y\ 正溢出 \<br>\ x+y,\ -2^{w-1}\le x+y &lt; 2^{w-1}\ 正常\<br>\ x+y+2^{w},\ x+y&lt;-2^{w-1}\ 负溢出<br>\end{cases}\ \ \ \ \ \ \ \ \ \ \ &#x3D;U2T</em>{w}[(x+y)\ mod\ 2^{w}]<br>$$</p><img src="/2024/09/12/ics%E7%AC%AC%E4%B8%80%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20240912205703898.png" class="" title="image-20240912205703898"><p><code>两个数w位补码之和与无符号之和有完全相同的位级表示。实际上，大多数计算机使用同样的机器指令来执行无符号或者有符号加法</code></p><p>检测条件：s&#x3D;x+y,当且仅当x&gt;0,y&gt;0,但<br>$$<br>s\le 0<br>$$<br>时，计算s发生了正溢出。当且仅当x&lt;0,y&lt;0,但<br>$$<br>s\geq 0<br>$$<br>计算s发生了负溢出</p><p>还是用刚才 <code>w=3</code> 作为例子，能够表达的数字范围是 <code>100~011(-4~3)</code>，如果一个表达式是 <code>011+010(3+2)</code>，理论上应该等于 5，但是相加之后变成了 <code>101(-3)</code>，也就是发生了正溢出。如果一个表达式是 <code>100+101(-4+(-3))</code>，理论上应该等于 -7，但是相加后进位截取变成了 <code>001(1)</code>，也就是发生了负溢出。</p><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><ul><li>无符号乘法：$$x*_{w}^{u}&#x3D;(x·y)\ mod\ 2^{w}$$</li><li>有符号乘法:$$x*_{w}^{t}y&#x3D;U2T((x·y)\ mod\ 2^{w})$$</li></ul><p>这是因为无符号和补码乘法的位级等价性。</p><img src="/2024/09/12/ics%E7%AC%AC%E4%B8%80%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20240912211502987.png" class="" title="image-20240912211502987"><img src="/2024/09/12/ics%E7%AC%AC%E4%B8%80%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20240912211516928.png" class="" title="image-20240912211516928"><ul><li>例子：</li></ul><img src="/2024/09/12/ics%E7%AC%AC%E4%B8%80%E5%91%A8-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20240912211557093.png" class="" title="image-20240912211557093"><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;为什么学习这本书&quot;&gt;&lt;a href=&quot;#为什么学习这本书&quot; class=&quot;headerlink&quot; title=&quot;为什么学习这本书&quot;&gt;&lt;/a&gt;为什么学习这本书&lt;/h1&gt;&lt;h2 id=&quot;很多东西并不像看起来那样简单&quot;&gt;&lt;a href=&quot;#很多东西并不像看起来</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://187370.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSAPP" scheme="https://187370.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CSAPP/"/>
    
    
    <category term="笔记" scheme="https://187370.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="ics" scheme="https://187370.github.io/tags/ics/"/>
    
  </entry>
  
  <entry>
    <title>大一</title>
    <link href="https://187370.github.io/2024/09/04/title/"/>
    <id>https://187370.github.io/2024/09/04/title/</id>
    <published>2024-09-04T07:21:32.000Z</published>
    <updated>2024-09-24T01:24:56.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大一鸡汤"><a href="#大一鸡汤" class="headerlink" title="大一鸡汤"></a>大一鸡汤</h1><p>#长文警告</p><p>#高考志愿</p><p>#经历</p><p>#鸡汤</p><p>诶嘿，北大进度条25%，大一正式结束！</p><p>去年的6.24号23点53分左右，686分的成绩说实话刚开始让我眼前一喜的，但是300多名的排名让我心里不是滋味，那一夜我裹着被子哭了好久，然后后来去参加清华强基考试，400分的笔试，我竟然漏看了一个100分的作文，虽然进了面试，面试成绩也不错，但是那100分的分差直接导致了我清华强基的失败。</p><p>当时的我和大多数被<em>PUA</em>三年的高中生一样，对于学校，只认清北，其他都是坑，我屋里贴满了清华的明信片，书桌上也写着“杀进清华”等等类似的话，所以，这一系列：自强失败，强基失败，分数低垂，我对我的清华梦很担忧。当时上交、浙大、复旦、中科大等学校都联系了我，上交给了我计算机大类，浙大给了我机器人工程外加图灵班选拔资格，复旦给了我计算机，中科大直接给了我计算机拔尖班，我不知道该选择什么，是学校还是专业？</p><p>6.26~6.28时，我犹豫了好久，参加了上交的招生会，在国专报名快截止的时候，上交给我打了最后一次电话，说让我不要报清北，不会录到好专业，他那面会给我计算机的，我对计算机也很感兴趣，我也很看好计算机的现在和前景，因为我知道计算机不会像土木那样，土木的发展是有限的，而计算机永远是无限的，最后一个小时，只允许修改一次，最后我把志愿填好，第一志愿清华，第二志愿清华（两次是不同的五个专业），第三志愿北大，第四志愿北大,服从调剂，在点击保存的时候，说实话，我还是心有不甘的，不甘自己高中的努力换来的只是一个好学校的不太好的专业，也不该是一个不是顶校的好专业，我恨，但无用，最后，我点击了保存并提交，并给班主任打了电话，班主任很满意，呵，我就知道，这个只看清北的河南。</p><p>本一批的话，就按浙大，上交，复旦，南大填的，虽然，我知道填啥都无用，国专会录的。</p><p>清华还是没录，笑死，自强，强基，国专，三次机会都没上，算是无缘，可我后来才知道，塞翁失马焉知非福。</p><p>二十多天后，北大的录取通知书到了，录取到了环境科学与工程学院，我很高兴，看着红色的录取通知书、妈妈那开心的笑、亲戚赞许的话语，我想，这就是正确的选择吧。</p><p>8月19号，北大开学，早早就从酒店去往北大邱德拔体育馆，迎新仪式上，学姐学长们真的很热情，我很喜欢这个院系，很喜欢这个氛围。但没办法，我不喜欢这个专业，在环境科学大数据方向招生时，我毫不犹豫地报了名，环科大数据录了四个人，我是其中一个，开学我就向学长咨询转到信科的经验，从一开始，我就按照信科的课程选课，高等数学A，线性代数A，计算概论A，三门硬课压的我喘不过气，但我知道这是选择功名与兴趣并存应该付出的代价。</p><p>期中，呵，考的稀烂，至今记着，高数64分，线代67分，两门数学都没到平均分，别提优秀了。后来辅导员找我谈话，他与我关系极好，我告诉他我要转系的想法，他没有像其他老师那样劝我留在环院，他知道我真的对环境提不起兴趣，他问了我期中的成绩，对我说，这个成绩，如果期末考的和这一样差的话，不可能转到信科的，我恨，恨自己不争气，我焦虑，焦虑的睡不着觉。他劝我说，可能我的课程太难了，尽力就行。</p><p>其实只有我自己知道，期中前，虽然我尽力装出努力学习的样子，但实际上是没有努力的，是的，我是天天去图书馆，去图书馆干嘛呢，玩手机，我是计算概论的代码每次都完成的很好，怎么完成的，呵，问这个AI,问那个AI。。。</p><p>这种情况不能再继续了……</p><p>期中后，我是真的努力了，我找了个搭子，线代换了个老师旁听，高数开始认真自学，期末周时，我回顾后半期，高数书上一道不留的全部写完的例题和练习题，四百多页的线代课堂笔记、复习笔记、期末笔记，leetcode网站上的两百多道的算法题，真的很励志，也真的很让自己感动，期末考的不差，最后的总评也不错。</p><p>绩点关过去了，大一下期，四月份转专业报名时，我挥笔即下，信息科学技术学院，计算机科学与技术专业，那个我无数日日夜夜梦到的院系和专业。</p><p>朋友和我填的一样，交完表后，我们逛了校园，从大草坪，到未名湖，到博雅塔，我看出他很焦虑，他问我，你不慌的吗？我不知道，我只知道一点，未来是不确定性的，就像，如果当时清华强基过了，即使能转系，转到计算机，不可能。上天给了我次机会，我抓住就行了，至于能不能成，关我屁事？</p><p>五月初，很开心，姐姐带我去了青岛！看了海（上次看海还是十一年前）。五月十号，机考，AC6道，不错，入了面试，五月十一号，面试，依旧不错，老师对我的表现非常满意。顺理成章，我被录取了，很喜悦，真的，很喜悦，我对所有我在意和在意我的人都说了，他们很开心，当然，我更开心。</p><p>剩下的就是，大一的几个大作业，期末，都还行，值得一提的是我们项目组的“水库”记账软件成功入选路演，我很高兴！！！</p><p>接下来的五月，也就还行？过的很开心，真实让我惊喜的还是那个六一。</p><p>六月一号，我非常喜欢的那个女生竟然给我表白了，真的特别开心，自六月一号以后，整个六月都有她陪在身边，真的非常非常开心！！！</p><p>但总结，，，</p><p> 总感觉，我对这所园子的“开发”程度还远远不及十分之一。北面的很多院系我还没探索，社团也参加的不多，本科生科研，也还没搞过，这所园子，我很喜欢，它真的很丰富，它提供的资源真的，远超我的想象，它提供的机会也超乎我的想象，无数的本研项目，等着我大二参加，信科的拔尖班选拔给了我机会，我也申请了，那个欠我一年的内蒙古观星活动，大二，我可是想去的，这下，没人拦我了吧。</p><p>我不是J人（擅长规划的人），走一步看一步，这是我大一修到的课，也是北大教我的课，还是那句话，塞翁失马焉知非福，不只是我，我姐也是，当年她差一点点保研，很伤心，不过，幸好没保上研，她最后考到了一所211的人工智能专业，目前，很好！</p><p>不擅长规划，也不知道前景如何，谁知道未来呢，保研？考研？又或是本科就业，甚至创业，没人说的清除，也不会有人说清楚，人生海海，我只负责掌舵，过程如何，当然是风浪决定。</p><p>永远不要瞧不起一个人，因为有些人，就是喜欢逆风翻盘。</p><p>最后一句忠告：</p><p>学校和专业只能决定你的下限，你的上限只能由自己决定！！！</p><p>█████████████                                                                                                 亲爱的PKUer，您的大学旅途也走完四分之一，祝好！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;大一鸡汤&quot;&gt;&lt;a href=&quot;#大一鸡汤&quot; class=&quot;headerlink&quot; title=&quot;大一鸡汤&quot;&gt;&lt;/a&gt;大一鸡汤&lt;/h1&gt;&lt;p&gt;#长文警告&lt;/p&gt;
&lt;p&gt;#高考志愿&lt;/p&gt;
&lt;p&gt;#经历&lt;/p&gt;
&lt;p&gt;#鸡汤&lt;/p&gt;
&lt;p&gt;诶嘿，北大进度条25%，大一</summary>
      
    
    
    
    <category term="大学生涯" scheme="https://187370.github.io/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="鸡汤" scheme="https://187370.github.io/tags/%E9%B8%A1%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP</title>
    <link href="https://187370.github.io/2024/08/30/CSAPP/"/>
    <id>https://187370.github.io/2024/08/30/CSAPP/</id>
    <published>2024-08-30T09:04:48.918Z</published>
    <updated>2024-09-18T07:18:44.707Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="信息的表示和处理"><a href="#信息的表示和处理" class="headerlink" title="信息的表示和处理"></a>信息的表示和处理</h1><h2 id="三种最重要的数字表示"><a href="#三种最重要的数字表示" class="headerlink" title="三种最重要的数字表示"></a>三种最重要的数字表示</h2><ul><li><code>无符号编码</code>:基于传统的二进制表示法，表示大于或者等于零的数字</li><li><code>补码</code>:表示有符号整数的最常见的方式，有符号整数就是可以为正或者为负的数字</li><li><code>浮点数</code>:是表示实数的科学计数法的以2为基数的版本</li></ul><p>计算机的表示方法是用有限数量的位来对一个数字编码，结果太大会溢出，但是对于整数运算，整数的计算机运算满足人们所熟知的真正整数运算的许多性质。</p><img src="/2024/08/30/CSAPP/image-20240824144039245.png" class="" title="image-20240824144039245"><p>这些结果都是-884901888（溢出）</p><p>但是浮点运算则有完全不同的数学属性，溢出会产生特殊值$$+\infty$$,但是一组正数的值总是正的。由于表示的精度有限，浮点运算有时是不可结合的。例如，(3.14+1e20)-1e20求得的值会是0.0，而3.14+(1e20-1e20)求得的值会是3.14.</p><p><code>注意</code>:</p><ul><li>整数的表示虽然只能编码一个相对较小的数值范围，但是这种表示是精确地</li><li>而浮点数虽然可以编码一个较大的数值范围，但是这种表示只是近似的。</li></ul><h2 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h2><ul><li><p>最小的可寻址的内存单元：<code>字节</code>(8位的块)</p></li><li><p>机器级程序将内存视为一个非常大的字节数组，成为<code>虚拟内存</code>(<code>virtual memory</code>)</p></li><li><p>内存的每个字节都由一个唯一的数字来表示，成为它的<code>地址</code>(<code>address</code>).</p></li><li><p>所有可能地址集合就称为<code>虚拟地址空间</code>(<code>virtual address space</code>)</p></li></ul><h3 id="十六进制表示法"><a href="#十六进制表示法" class="headerlink" title="十六进制表示法"></a>十六进制表示法</h3><p>一个字节由八位组成，值域位</p><p>​$$00000000_{2}\sim 11111111_{2}$$,</p><p>二进制表示过于冗长，十进制不易转换，采用<code>十六进制</code>,</p><p>用十六进制表示法书写，一个字节的值域位</p><p>​$$00_{16} \sim FF_{16}$$</p><p>​<img src="/2024/08/30/CSAPP/image-20240824151334363.png" class="" title="image-20240824151334363"></p><p>C语言中，以0x或者0X开头的数字是十六进制的值</p><p>各进制之间的转换，特别是十进制和十六进制之间的转换：</p><img src="/2024/08/30/CSAPP/image-20240824152206760.png" class="" title="image-20240824152206760"><h3 id="字数据大小"><a href="#字数据大小" class="headerlink" title="字数据大小"></a>字数据大小</h3><ul><li><code>字长</code>:每台计算机都有一个字长(word size)，指明指针数据的标称大小。</li></ul><p>解释：因为虚拟地址是以这样的一个字来编码的，所以字长决定的最重要的系统参数就是虚拟地址空间的最大大小，也就是说，对于一个字长为w位的机器而言，虚拟地址的范围为</p><p>​$$0 \sim 2_{w}-1$$</p><p>程序最多访问</p><p>​$$2_{w}$$</p><p>字节。</p><blockquote><p>字长（word size）指的是计算机处理器在一次运算或数据处理操作中，能够同时处理的二进制位数。字长直接决定了处理器在一条指令中可以处理的数据量的大小，影响了计算机的性能、存储容量和指令集设计。</p><h3 id="字长的具体表现："><a href="#字长的具体表现：" class="headerlink" title="字长的具体表现："></a>字长的具体表现：</h3><ol><li><p><strong>处理器处理数据的能力</strong>：字长决定了CPU一次能够处理的二进制位数。例如，32位处理器一次能处理32位二进制数据，而64位处理器一次能处理64位二进制数据。</p></li><li><p><strong>内存寻址能力</strong>：字长影响处理器能够寻址的内存空间大小。例如，在32位处理器中，最大可寻址内存为2^32个字节（即4GB）；而在64位处理器中，最大可寻址内存空间可达到2^64个字节，理论上是非常庞大的（实际上因其他技术因素限制通常不到此上限）。</p></li><li><p><strong>指令集架构（ISA）</strong>：字长决定了处理器的指令宽度，影响了指令的格式、寄存器大小以及数据操作方式。例如，64位指令集架构（如x86-64）会包含针对64位寄存器的操作指令，而32位指令集架构（如x86）只能处理32位的寄存器。</p></li><li><p><strong>性能</strong>：较大的字长意味着处理器能够在一次运算中处理更多的数据，通常会提高程序的运行效率。然而，实际的性能提升还取决于应用程序和操作系统是否能够充分利用这种大字长。</p></li><li><p><strong>硬件设计</strong>：字长影响到计算机硬件设计中的其他部分，比如寄存器、总线、ALU（算术逻辑单元）等的设计。字长越大，通常硬件的复杂性、成本和功耗都会增加。</p></li></ol><h3 id="常见的字长："><a href="#常见的字长：" class="headerlink" title="常见的字长："></a>常见的字长：</h3><ul><li><strong>8位</strong>：早期的微处理器通常为8位，如Intel 8080。</li><li><strong>16位</strong>：如Intel 8086，广泛用于20世纪80年代。</li><li><strong>32位</strong>：如Intel 80386、ARM Cortex-A32等，现代计算机中曾经非常流行。</li><li><strong>64位</strong>：现代计算机的主流字长，常见于x86-64、ARM64架构的处理器中。</li></ul><p>总结来说，字长是计算机体系结构中一个重要的指标，它不仅影响处理器的设计，还影响到整个计算机系统的性能和使用体验。</p></blockquote><p>C语言各数据类型分配的字节数。</p><img src="/2024/08/30/CSAPP/image-20240824155720924.png" class="" title="image-20240824155720924"><h3 id="寻址和字节顺序"><a href="#寻址和字节顺序" class="headerlink" title="寻址和字节顺序"></a>寻址和字节顺序</h3><p>在几乎所有机器上，多字节对象都被存储为连续的字节序列，对象的地址为所使用字节的<code>最小的地址。</code></p><p>排列表示对象的两个通用规则：</p><p>考虑一个<code>w</code>位的整数，位表示为</p><p>​$$[x_{w-1},x_{w-2},…,x_{0}]$$</p><ul><li>最高有效位:</li></ul><p>$$<br>x_{w-1}<br>$$</p><ul><li>最低有效位<br>$$<br>x_{0}<br>$$</li></ul><p>假设w是8的倍数，这些位就能被划分为字节，其中<code>最高有效字节</code>包含位<br>$$<br>[x_{w-1},x_{w-2},…,x_{w-8}]<br>$$<br><code>最低有效字节</code><br>$$<br>[x_{7},x_{6},…,x_{0}]<br>$$<br>排序规则：</p><ul><li><code>小端法</code>:某些机器选择在内存中按照从最低有效字节到最高有效字节的顺序存储对象</li><li><code>大端法</code>:另一些机器则按照从最高有效字节到最低有效字节的顺序存储</li></ul><p>例子：</p><img src="/2024/08/30/CSAPP/image-20240824161901996.png" class="" title="image-20240824161901996"><p>一段使用强制类型转换来访问和打印不同程序对象的字节表示</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> *byte_pointer;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_bytes</span><span class="params">(byte_pointer start,<span class="type">size_t</span> len)</span></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> len;</span><br><span class="line">    <span class="keyword">for</span>(i =<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2x&quot;</span>,start[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_int</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">show_bytes</span>((byte_pointer)&amp;x,<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_float</span><span class="params">(<span class="type">float</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">show_bytes</span>((byte_pointer)&amp;x,<span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_pointer</span><span class="params">(<span class="type">void</span> *x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">show_bytes</span>((byte_pointer)&amp;x,<span class="built_in">sizeof</span>(<span class="type">void</span>*x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_show_bytes</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ival=val;</span><br><span class="line">    <span class="type">float</span> fval=(<span class="type">float</span>)ival;</span><br><span class="line">    <span class="type">int</span> *pval=&amp;ival;</span><br><span class="line">    <span class="built_in">show_int</span>(ival);</span><br><span class="line">    <span class="built_in">show_float</span>(fval);</span><br><span class="line">    <span class="built_in">show_pointer</span>(pval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/08/30/CSAPP/image-20240824182519362.png" class="" title="image-20240824182519362"><p>可以观察到，尽管浮点型和整数型数据都是对数值12345编码，但是它们有截然不同的字节模式:整型为<code>0x00003039</code>，而浮点数为<code>0x4640E400</code>。</p><blockquote><h4 id="1-整数型数据的表示方式"><a href="#1-整数型数据的表示方式" class="headerlink" title="1. 整数型数据的表示方式"></a>1. 整数型数据的表示方式</h4><h5 id="补码表示法"><a href="#补码表示法" class="headerlink" title="补码表示法"></a>补码表示法</h5><p>计算机中的整数通常采用补码（Two’s Complement）表示法，这是一种编码方式，用于表示正数和负数。以32位系统为例，整数12345的补码表示如下：</p><ol><li><strong>二进制表示</strong>：12345转换为二进制为<code>0000 0000 0000 0000 0011 0000 0011 1001</code>。</li><li><strong>十六进制表示</strong>：将二进制按4位一组转换为十六进制，即<code>0x00003039</code>。</li></ol><p>对于无符号整数，所有位都用于表示数值；而对于有符号整数，最高位（MSB）用于表示符号（0表示正数，1表示负数）。</p><h5 id="示例：12345的整数表示"><a href="#示例：12345的整数表示" class="headerlink" title="示例：12345的整数表示"></a>示例：12345的整数表示</h5><ul><li>二进制（32位）：<code>0000 0000 0000 0000 0011 0000 0011 1001</code></li><li>十六进制：<code>0x00003039</code></li></ul><h4 id="2-浮点型数据的表示方式"><a href="#2-浮点型数据的表示方式" class="headerlink" title="2. 浮点型数据的表示方式"></a>2. 浮点型数据的表示方式</h4><h5 id="IEEE-754标准"><a href="#IEEE-754标准" class="headerlink" title="IEEE 754标准"></a>IEEE 754标准</h5><p>浮点数的表示遵循IEEE 754标准，通常分为单精度（32位）和双精度（64位）。这里以单精度浮点数为例，介绍其表示方式。</p><p>单精度浮点数的32位被分为三部分：</p><ol><li><strong>符号位（1位）</strong>：表示数值的正负，0表示正数，1表示负数。</li><li><strong>指数位（8位）</strong>：表示指数部分，使用偏移量（bias）编码，偏移量为127，即实际指数 &#x3D; 存储的指数 - 127。</li><li><strong>尾数位（23位）</strong>：表示有效数字部分（尾数），隐含1位，通常表示数值的二进制小数部分。</li></ol><p>浮点数的值为：<br>[ V &#x3D; (-1)^{符号位} \times 2^{指数位 - 127} \times (1 + 尾数) ]</p><h5 id="示例：12345的浮点表示"><a href="#示例：12345的浮点表示" class="headerlink" title="示例：12345的浮点表示"></a>示例：12345的浮点表示</h5><p>将12345转换为IEEE 754单精度浮点数：</p><ol><li><strong>符号位</strong>：正数，所以符号位为0。</li><li><strong>指数位</strong>：将12345转换为二进制，得到<code>11000000111001</code>。根据IEEE 754规则，找到指数部分（近似为13位），并加上偏移量127，所以指数部分为<code>10001100</code>。</li><li><strong>尾数位</strong>：表示小数部分，取二进制的余下部分<code>1.1000000111001</code>，保留23位。</li></ol><p>最后，得到12345的IEEE 754单精度浮点数表示为<code>0 10001100 10000001110010000000000</code>，对应的十六进制为<code>0x4640E400</code>。</p><h5 id="转换过程"><a href="#转换过程" class="headerlink" title="转换过程"></a>转换过程</h5><ol><li><strong>二进制表示</strong>：12345 ≈ <code>1.1000000111001 × 2^13</code></li><li><strong>指数</strong>：13 + 127 &#x3D; 140，二进制为<code>10001100</code></li><li><strong>尾数</strong>：<code>10000001110010000000000</code>，总共23位</li><li><strong>最终结果</strong>：<code>0 10001100 10000001110010000000000</code>，即<code>0x4640E400</code></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><strong>整数型数据</strong>：直接以补码形式存储，编码方式简单直接。对于12345，十六进制表示为<code>0x00003039</code>。</li><li><strong>浮点型数据</strong>：遵循IEEE 754标准，分为符号、指数和尾数部分。对于12345，十六进制表示为<code>0x4640E400</code>。</li></ul><p>这两种表示方式的差异主要源于浮点数需要处理更广泛的数值范围和精度问题，因此其编码更加复杂，而整数型数据则更为简洁直接。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;信息的表示和处理&quot;&gt;&lt;a href=&quot;#信息的表示和处理&quot; class=&quot;headerlink&quot; title=&quot;信息的表示和处理&quot;&gt;&lt;/a&gt;信息的表示和处理&lt;/h1&gt;&lt;h2 id=&quot;三种最重要的数字表示&quot;&gt;&lt;a href=&quot;#三种最重要的</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://187370.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://187370.github.io/2024/08/25/hello-world/"/>
    <id>https://187370.github.io/2024/08/25/hello-world/</id>
    <published>2024-08-25T09:42:44.605Z</published>
    <updated>2024-09-24T01:24:49.953Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="HEXO" scheme="https://187370.github.io/categories/HEXO/"/>
    
    
  </entry>
  
</feed>
